<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JingyuJung&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://monibu1548.github.io/"/>
  <updated>2018-05-14T13:02:54.914Z</updated>
  <id>http://monibu1548.github.io/</id>
  
  <author>
    <name>Jingyu Jung</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS앱 고도화 - Firebase Remote Config를 사용한 앱 운영방법</title>
    <link href="http://monibu1548.github.io/2018/05/14/firebase-config/"/>
    <id>http://monibu1548.github.io/2018/05/14/firebase-config/</id>
    <published>2018-05-14T12:14:04.000Z</published>
    <updated>2018-05-14T13:02:54.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Firebase-Remote-Config"><a href="#Firebase-Remote-Config" class="headerlink" title="Firebase Remote Config"></a>Firebase Remote Config</h2><p>Firebase Remote Config란, 앱 업데이트를 게시하지 않고도 앱의 동작과 모양을 변경할 수 있도록 도와주는 서비스입니다. 앱의 실행시점에 서버에서 Config를 읽어오는 비교적 쉬운 개념이지만. 이를 활용해서 다양한 응용동작을 할 수 있습니다.</p><p>비슷한 서비스로는 NHN Entertainment의 Toast Cloud - Launching이 있습니다.</p><ol><li>최신 업데이트 버전을 가져와 현재 설치된 버전과 비교하여 업데이트를 유도할 수 있습니다.</li><li>공지사항 팝업을 띄울 수 있습니다.</li><li>Color 값을 전달하면 앱의 전반전인 테마 컬러 변경이 가능합니다.</li><li>static한 문구들 (연도, 전화번호)을 변경할 때 앱을 새로 빌드할 필요가 없습니다.</li></ol><p>이 기능을 구현하려면 Config 정보를 내려줄 서버가 필요합니다. 하지만 단일 앱 개발자에게 서버는 사치죠ㅜㅠ</p><p>고맙게도 Google의 Firebase에서 이러한 기능을 제공합니다. <code>Remote Config</code> 라는 이름으로 위 기능을 제공하고 있습니다.</p><h2 id="Firebase-시작하기"><a href="#Firebase-시작하기" class="headerlink" title="Firebase 시작하기"></a>Firebase 시작하기</h2><p><a href="https://firebase.google.com/?authuser=0" target="_blank" rel="noopener">Google Firebase 홈페이지</a></p><p><img src="../../../../images/firebaseconfig/1.png" alt=""></p><p>프로젝트 생성 후 <code>Remote Config</code> 시작하기를 클릭합니다.</p><p><img src="../../../../images/firebaseconfig/2.png" alt=""><br>이제 매개변수를 설정할 수 있습니다.</p><p><img src="../../../../images/firebaseconfig/3.png" alt=""><br>버전, 광고 실행 유무 등, 앱애서 사용할 매개변수들을 추가합니다.</p><p><img src="../../../../images/firebaseconfig/4.png" alt=""><br><code>변경사항 개시</code> 버튼을 클릭하여 해당 내용을 배포합니다.</p><h2 id="iOS에서-Firebase-Remote-Config-설정하기"><a href="#iOS에서-Firebase-Remote-Config-설정하기" class="headerlink" title="iOS에서 Firebase Remote Config 설정하기"></a>iOS에서 Firebase Remote Config 설정하기</h2><p><a href="https://firebase.google.com/docs/remote-config/use-config-ios?authuser=0" target="_blank" rel="noopener">공식 가이드 문서 링크</a></p><h2 id="GoogleService-Info-plist"><a href="#GoogleService-Info-plist" class="headerlink" title="GoogleService-Info.plist"></a>GoogleService-Info.plist</h2><p>iOS앱에서 Firebase에 연결하기 위해서는 <code>GoogleService-Info.plist</code> 가 필요하며. 이 파일은 Firebase에서 제공합니다.</p><p><img src="../../../../images/firebaseconfig/5.png" alt=""><br>Firebase에서 프로젝트를 생성합니다.</p><p><img src="../../../../images/firebaseconfig/6.png" alt=""><br>프로젝트에서 사용하고있는 Firebase 서비스의 정보를 담긴 <code>GoogleService-Info.plist</code>를 다운받습니다.<br>나중에 Cloude Message 등 다른 추가기능 사용을 선택하면 <code>GoogleService-Info.plist</code> 업데이트도 필요합니다.</p><h3 id="Pod-설치"><a href="#Pod-설치" class="headerlink" title="Pod 설치"></a>Pod 설치</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Firebase/RemoteConfig&apos;</span><br></pre></td></tr></table></figure><p>Podfile에 추가 후 설치합니다.</p><h3 id="AppDelegate-설정"><a href="#AppDelegate-설정" class="headerlink" title="AppDelegate 설정"></a>AppDelegate 설정</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Firebase/RemoteConfig</span><br></pre></td></tr></table></figure><p>사용하고 있는 AppDelegate에 RemoteConfig 모듈을 추가합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool &#123;</span><br><span class="line">        FirebaseApp.configure()</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>didFinishLaunchingWithOptions</code> 메소드에  Firebase.configure()를 추가하여 공유 인스턴스를 구성합니다.</p>]]></content>
    
    <summary type="html">
    
      Firebase Remote Config
Firebase Remote Config란, 앱 업데이트를 게시하지 않고도 앱의 동작과 모양을 변경할 수 있도록 도와주는 서비스입니다. 앱의 실행시점에 서버에서 Config를 읽어오는 비교적 쉬운 개념이지만. 이를 활용해서 다양한 응용동작을 할 수 있습니다.

비슷한 서비스로는 NHN Entertainment의 Toast Cloud - Launching이 있습니다.

 1. 최신 업데이트 버전을 가져와 현재 설치된 버전과 비교하여 업데이트를 유도할 수 있습니다.
 2. 공지사항 팝업을 띄울 
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Firebase" scheme="http://monibu1548.github.io/tags/Firebase/"/>
    
      <category term="앱 고도화" scheme="http://monibu1548.github.io/tags/%EC%95%B1-%EA%B3%A0%EB%8F%84%ED%99%94/"/>
    
  </entry>
  
  <entry>
    <title>Storyboard autolayout 환경에서 Keyboard Event로 Height 처리하기</title>
    <link href="http://monibu1548.github.io/2018/05/14/keyboard-autolayout-event/"/>
    <id>http://monibu1548.github.io/2018/05/14/keyboard-autolayout-event/</id>
    <published>2018-05-13T15:03:38.000Z</published>
    <updated>2018-05-13T15:35:21.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Text-Input이-필요한-화면에서-고려할점"><a href="#Text-Input이-필요한-화면에서-고려할점" class="headerlink" title="Text Input이 필요한 화면에서 고려할점"></a>Text Input이 필요한 화면에서 고려할점</h2><p>TextView 또는 TextField를 이용해 사용자로부터 텍스트를 입력받는 화면에서는 <code>키보드</code>가 나타납니다.<br><code>키보드</code>가 나타나면 그만큼 컨텐츠를 보여줄 수 있는 화면의 Height는 줄어들게 되고 그 중 일부는 키보드 밑으로 말려들어가 보이지 않게 되는 문제가 생길 수 있습니다.<br>따라서 키보드가 나타날 때 아래의 뷰를 키보드 위로 올려주는 구현이 필요합니다.</p><h2 id="왜-키보드는-Autolayout-Bottom-Layout에-걸리지-않는가…"><a href="#왜-키보드는-Autolayout-Bottom-Layout에-걸리지-않는가…" class="headerlink" title="왜 키보드는 Autolayout Bottom Layout에 걸리지 않는가…"></a>왜 키보드는 Autolayout Bottom Layout에 걸리지 않는가…</h2><p>스토리보드와 오토레이아웃을 사용하면서 iOS 11 이후 등장한 <code>SafeArea</code>에 대한 대응이 편해졌습니다.<br>처음에는 당연히 키보드가 나타날 때 <code>Bottom Layout Guide</code>가 올라오면서 자동으로 대응이 될 거라고 생각했지만…. 중요한 문구, 버튼들이 키보드 밑으로 말려들어가는 대참사가 발생했습니다.</p><h2 id="Notification과-Autolayout을-이용해-간단하게-해결"><a href="#Notification과-Autolayout을-이용해-간단하게-해결" class="headerlink" title="Notification과 Autolayout을 이용해 간단하게 해결"></a>Notification과 Autolayout을 이용해 간단하게 해결</h2><p>iOS가 오토레이아웃을 해주지 않는다면 Keyboard 사이즈의 View를 직접 넣어 Autolayout으로 동작하게 만들고,<br>Notification을 이용해 keyboard 상태를 받아 Keyboard layout을 대신하는 View의 Height를 조작함으로써 수정했습니다.</p><p><img src="../../../../images/keyboard/1.png" alt=""></p><p>Keyboard가 나타날 수 있는 ViewController의 가장 하단에 View를 하나 끼워넣습니다.<br>이 View는 키보드의 show, dismiss 동일한 타이밍, 사이즈로 동작하게 만들겁니다.</p><p>Contraint를 이용해 topAnchor를 기존에 가장 하단에 있던 뷰의 bottomAnchor에 연결하고, bottomAnchor는 viewController의 root view의 bottom layout guide에 연결해줍니다.<br>그리고 height는 키보드와 동일한 값을 갖게 할거고 초기값은 0으로 설정해줍니다.(키보드 없는상태)</p><p>이제 <code>Notification</code>을 이용해 이 View의 height를 조절하면 됩니다.</p><h2 id="Keyboard-Notification-Register"><a href="#Keyboard-Notification-Register" class="headerlink" title="Keyboard Notification Register"></a>Keyboard Notification Register</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">TranslationViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">initializeKeyboardEvent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(keyBoardWillShow(notification:)), name: .<span class="type">UIKeyboardWillShow</span>, object: <span class="literal">nil</span>)</span><br><span class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: #selector(keyBoardWillHide(notification:)), name: .<span class="type">UIKeyboardWillHide</span>, object: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">removeKeyboardEvent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(<span class="keyword">self</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">keyBoardWillShow</span><span class="params">(notification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> userInfo:<span class="type">NSDictionary</span> = notification.userInfo! <span class="keyword">as</span> <span class="type">NSDictionary</span></span><br><span class="line">        <span class="keyword">let</span> keyboardFrame:<span class="type">NSValue</span> = userInfo.value(forKey: <span class="type">UIKeyboardFrameEndUserInfoKey</span>) <span class="keyword">as</span>! <span class="type">NSValue</span></span><br><span class="line">        <span class="keyword">let</span> keyboardRectangle = keyboardFrame.cgRectValue</span><br><span class="line">        <span class="keyword">let</span> keyboardHeight = keyboardRectangle.height</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.keyboardHeightConstraint.constant = keyboardHeight</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">keyBoardWillHide</span><span class="params">(notification: NSNotification)</span></span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.keyboardHeightConstraint.constant = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 Keyboard Notification 관련 로직을 처리하기 위해 extension으로 분리한 controller입니다.</p><ul><li>initializeKeyboardEvent : Keyboard의 Show, Hide 이벤트를 받기위해 Notification Center에 옵저버를 등록합니다.</li><li>keyBoardWillShow : Keyboard가 나타날때 호출되며 notification 객체에서 keyboard height 가져올 수 있습니다. </li><li>keyBoardWillHide : Keyboard가 사라질때 호출됩니다.</li><li>removeKeyboardEvent : Notification을 더 이상 사용하지 않을 때 옵저버를 제거합니다.</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TranslationViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="keyword">self</span>.initializeKeyboardEvent()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.removeKeyboardEvent()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>extension에서 구현했던 Nofitication관련 메소드들을 호출하는 메인 뷰컨트롤러입니다.</p><p>키보드를 사용하는 뷰 컨트롤러가 많지는 않지만, 추가될 때마다 이 작업을 계속해야 할 텐데, 아예 상속받을 뷰 컨트롤러을 하나 만들어 주는 것도 좋을 것 같습니다.</p>]]></content>
    
    <summary type="html">
    
      Text Input이 필요한 화면에서 고려할점
TextView 또는 TextField를 이용해 사용자로부터 텍스트를 입력받는 화면에서는 키보드가 나타납니다.
키보드가 나타나면 그만큼 컨텐츠를 보여줄 수 있는 화면의 Height는 줄어들게 되고 그 중 일부는 키보드 밑으로 말려들어가 보이지 않게 되는 문제가 생길 수 있습니다.
따라서 키보드가 나타날 때 아래의 뷰를 키보드 위로 올려주는 구현이 필요합니다.

왜 키보드는 Autolayout Bottom Layout에 걸리지 않는가…
스토리보드와 오토레이아웃을 사용하면서 iOS 11 이
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="오토레이아웃" scheme="http://monibu1548.github.io/tags/%EC%98%A4%ED%86%A0%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"/>
    
  </entry>
  
  <entry>
    <title>[Swift] Date to String, Date &lt;=&gt; String 객체간 변환</title>
    <link href="http://monibu1548.github.io/2018/05/13/string-date-convert/"/>
    <id>http://monibu1548.github.io/2018/05/13/string-date-convert/</id>
    <published>2018-05-13T11:05:40.000Z</published>
    <updated>2018-05-13T11:18:55.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="String과-Date의-객체간-변환"><a href="#String과-Date의-객체간-변환" class="headerlink" title="String과 Date의 객체간 변환"></a>String과 Date의 객체간 변환</h1><p>Date와 String의 변환은 매우 자주 사용하면서도 할 때마다 뭐였지 하고 다시 찾아보곤 합니다.<br>또 Obj-C만 사용하다가 Swift로 넘어오면서 한번 정리하고 갑니다. 참고로 swift4 입니다</p><h2 id="String-gt-Date"><a href="#String-gt-Date" class="headerlink" title="String -&gt; Date"></a>String -&gt; Date</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateString:<span class="type">String</span> = <span class="string">"2018-05-13 15:05:40"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()</span><br><span class="line"></span><br><span class="line">dateFormatter.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line">dateFormatter.timeZone = <span class="type">NSTimeZone</span>(name: <span class="string">"UTC"</span>) <span class="keyword">as</span> <span class="type">TimeZone</span>?</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date:<span class="type">Date</span> = dateFormatter.date(from: dateString)!</span><br></pre></td></tr></table></figure><p>Obj-C 와 마찬가지로 <code>DateFormatter</code>를 이용합니다.<br>DateFormatter에 날짜 형식화 타임존을 설정 후 String을 dateFormatter의 <code>date</code> 메소드를 이용해 변환합니다.</p><h2 id="Date-gt-String"><a href="#Date-gt-String" class="headerlink" title="Date -&gt; String"></a>Date -&gt; String</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date:<span class="type">Date</span> = <span class="type">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateFormatter = <span class="type">DateFormatter</span>()</span><br><span class="line">dateFormatter.dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dateString:<span class="type">Date</span> dateFormatter.string(from: date)</span><br></pre></td></tr></table></figure><p>DateFormatter의 <code>string</code> 메소드를 사용하여 변환 가능합니다.</p>]]></content>
    
    <summary type="html">
    
      String과 Date의 객체간 변환
Date와 String의 변환은 매우 자주 사용하면서도 할 때마다 뭐였지 하고 다시 찾아보곤 합니다.
또 Obj-C만 사용하다가 Swift로 넘어오면서 한번 정리하고 갑니다. 참고로 swift4 입니다

String -&gt; Date
1
2
3
4
5
6
7
8
9



let dateString:String = &quot;2018-05-13 15:05:40&quot;

let dateFormatter = DateFormatter()

dateFormatter.dateFormat = &quot;yyyy-MM-dd HH:mm:
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/categories/iOS/Swift/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/tags/Swift/"/>
    
      <category term="스위프트" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>[Swift] Optional이란? 옵셔널 이해하기</title>
    <link href="http://monibu1548.github.io/2018/05/12/swift-optional/"/>
    <id>http://monibu1548.github.io/2018/05/12/swift-optional/</id>
    <published>2018-05-12T06:41:46.000Z</published>
    <updated>2018-05-12T08:33:21.252Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>Swift가 갖는 Optional이라는 개념은 변수의 값이 <code>nil</code>일 수 있다는 것을 표현하는 건데요, 반대로 Optional이 아니라면(non-optional) 해당 값은 <code>nil</code>이 될 수 없음을 의미합니다. Objective-C를 사용해왔다면 Optional이라는 표현이 너무나도 당연해보일 수 있지만, Swift에서는 Optional은 말 그대로 <code>옵션(선택적)</code> 이며 기본값은 non-Optional 입니다.</p><h2 id="선언"><a href="#선언" class="headerlink" title="선언"></a>선언</h2><p>Optional 변수의 선언은 <code>?</code> 키워드를 사용합니다<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span>?</span><br></pre></td></tr></table></figure></p><p>Optional의 디폴트 값은 <code>nil</code>로 name은 <code>nil</code>을 갖게 됩니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> <span class="comment">// 컴파일에러</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="literal">nil</span> <span class="comment">// 컴파일에러</span></span><br></pre></td></tr></table></figure><p>만약 Optional 키워드를 사용하지 않았다면 값을 입력하라는 에러가 발생하고, 그 이후에라도 nil을 넣으려하면 컴파일에러가 발생합니다.<br>여기에서 Swift가 기본적으로 non-optional을 지원하면서 갖는 <code>엄청난 장점</code>을 느낄 수 있습니다.<br>nil에 대한 컴파일 에러를 통해 개발자는 nil에 대해 명확한 예외처리가 강제되며, 런타임에 nil로 인한 문제를 <code>컴파일 단계</code>에서 예방할 수 있습니다.</p><p>그래서 Swift가 잠재적 오류에 대해 안전하다고 표현하는 글도 많이 있습니다.</p><h2 id="Optional-변수의-이용"><a href="#Optional-변수의-이용" class="headerlink" title="Optional 변수의 이용"></a>Optional 변수의 이용</h2><p>Optional변수는 <code>nil</code>을 가질 수 있는 특별한 변수입니다. Optional 변수를 이용해서 작업할 때 Optional을 해제하는 과정이 추가적으로 필요합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var number1:Int? = 20</span><br><span class="line">var number2:Int = 100</span><br><span class="line"></span><br><span class="line">number1 + number2</span><br></pre></td></tr></table></figure></p><p>Int(optional)와 Int(non-optional)의 연산을 시도하면<br><code>Value of optional type &#39;Int?&#39; not unwrapped; did you mean to use &#39;!&#39; or &#39;?&#39;?</code></p><p>위 컴파일 에러가 발생합니다.<br>number1은 Optional로 nil값을 가질 <code>가능성</code>이 있기 때문에 컴파일 단계에서 에러를 발생시킵니다. 연산을 수행하기 위해서는 <code>unwrapping</code> 또는 <code>binding</code> 과정이 필요합니다.</p><h3 id="Optional-Unwrapping-옵셔널-해제"><a href="#Optional-Unwrapping-옵셔널-해제" class="headerlink" title="Optional Unwrapping (옵셔널 해제)"></a>Optional Unwrapping (옵셔널 해제)</h3><p>Optional Unwrapping이란 Optional 변수에서 Optional 껍데기를 벗겨내는 작업입니다. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number1:<span class="type">Int</span>? = <span class="number">20</span></span><br><span class="line"><span class="keyword">var</span> number2:<span class="type">Int</span> = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number1 &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = number1! + number1!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if 로 optional 변수의 값이 nil이 아닌지 판별 후 <code>!</code> unwrapping 키워드를 통해 강제로 값을 꺼내옵니다. 만약 if로 nil 체크를 하지 않고 <code>!</code>을 사용한다면 런타임 오류가 발생할 수 있습니다.</p><h3 id="Optional-Binding-옵셔널-바인딩"><a href="#Optional-Binding-옵셔널-바인딩" class="headerlink" title="Optional Binding (옵셔널 바인딩)"></a>Optional Binding (옵셔널 바인딩)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var number1:Int? = 20</span><br><span class="line">var number2:Int = 100</span><br><span class="line"></span><br><span class="line">if let nonOptionalNumber1 = number1 &#123;</span><br><span class="line">    let sum = nonOptionalNumber1 + number2</span><br></pre></td></tr></table></figure><p>Optional Unwrapping과 비슷하지만 Optional 값을 새로운 상수로 받고, 그 이후로 non-optional값을 사용한다는 차이점이 있다.<br>새로 선언된 nonOptionalNumber1은 이미 non-optional로 연산에 사용할 때 <code>!</code> 키워드를 사용할 필요가 없다.</p><h2 id="Optional-Chaining-옵셔널-체이닝"><a href="#Optional-Chaining-옵셔널-체이닝" class="headerlink" title="Optional Chaining (옵셔널 체이닝)"></a>Optional Chaining (옵셔널 체이닝)</h2><p>여러 객체를 혼합해서 사용하다보면 Optional끼리의 연산이 필요한 경우가 있습니다. 이 경우에 객체마다 옵셔널 바인딩을 사용하게 되면, if문이 꽤나 복잡해지겠죠<br>Optional Chaining을 통해서 좀 더 간단하게 Optional 예외처리를 할 수 있습니다.</p><p>swift에서 <code>.</code> 을 통해 클래스의 프로퍼티에 접근이 가능합다는 점을 이용합니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b:<span class="type">B</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">c</span>:<span class="type">String</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 경우 A의 프로퍼티 b의 c에 접근할 때, b에대한 옵셔널, c에대한 옵셔널, 2번의 바인딩이 필요합니다.<br>이 경우에 옵셔널 체이닝을 통해 한줄로 옵셔널 바인딩이 가능합니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a:<span class="type">A</span> = <span class="type">A</span>()</span><br><span class="line"><span class="keyword">if</span> a.b?.<span class="built_in">c</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a.b?.c</code> 를 통해 b의 옵셔널, c의 옵셔널 바인딩을 모두 처리가능합니다.</p><h2 id="Optional이-점점-불편해-보이는데-왜-사용할까"><a href="#Optional이-점점-불편해-보이는데-왜-사용할까" class="headerlink" title="Optional이 점점 불편해 보이는데 왜 사용할까?"></a>Optional이 점점 불편해 보이는데 왜 사용할까?</h2><p>Objective-C에는 아직 <code>nil</code>타입이 존재하며 하나의 프로젝트에서 obj-c와 swift를 혼용해서 사용할 수 있습니다. 따라서 obj-c와의 상호운용성을 위해 사용합니다.</p>]]></content>
    
    <summary type="html">
    
      Optional
Swift가 갖는 Optional이라는 개념은 변수의 값이 nil일 수 있다는 것을 표현하는 건데요, 반대로 Optional이 아니라면(non-optional) 해당 값은 nil이 될 수 없음을 의미합니다. Objective-C를 사용해왔다면 Optional이라는 표현이 너무나도 당연해보일 수 있지만, Swift에서는 Optional은 말 그대로 옵션(선택적) 이며 기본값은 non-Optional 입니다.

선언
Optional 변수의 선언은 ? 키워드를 사용합니다
1


var name: String?




Op
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/categories/iOS/Swift/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/tags/Swift/"/>
    
      <category term="스위프트" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>iOS 앱에서 광고 수익 얻기 (Admob 애드몹 설치, 부착)</title>
    <link href="http://monibu1548.github.io/2018/05/06/ios-admob/"/>
    <id>http://monibu1548.github.io/2018/05/06/ios-admob/</id>
    <published>2018-05-05T18:30:43.000Z</published>
    <updated>2018-05-05T19:08:15.995Z</updated>
    
    <content type="html"><![CDATA[<h2 id="앱을-다-만들었다면-수익에-도전해보자"><a href="#앱을-다-만들었다면-수익에-도전해보자" class="headerlink" title="앱을 다 만들었다면 수익에 도전해보자"></a>앱을 다 만들었다면 수익에 도전해보자</h2><p>모바일 어플리케이션에 광고를 부착할 수 있는 다양한 플랫폼이 있다. 그중에서도 Google의 Admob을 이용한 방법을 소개합니다.</p><h2 id="Admob-가입하기"><a href="#Admob-가입하기" class="headerlink" title="Admob 가입하기"></a>Admob 가입하기</h2><p><a href="https://www.google.co.kr/admob" target="_blank" rel="noopener">https://www.google.co.kr/admob</a> 구글 애드몹 페이지</p><p>구글 계정으로 로그인 할 수 있습니다.</p><h2 id="광고-생성하기"><a href="#광고-생성하기" class="headerlink" title="광고 생성하기"></a>광고 생성하기</h2><p>우선 애드몹 페이지에서 광고를 붙일 앱을 설정합니다. <code>앱 추가</code> 버튼을 통해 추가할 수 있습니다.</p><p><img src="../../../../images/admob/1.png" alt=""><br>광고를 부착할 앱이 기존에 스토어에 등록되어있던 앱인지, 새로 만들 앱인지 선택합니다. 저는 아직 스토어에 업로드 하지 않아서 <code>아니요</code>를 선택했습니다.</p><p><img src="../../../../images/admob/2.png" alt=""><br>앱의 이름(스토어에 노출되는 이름은 아니고, Admob에서 구분하기 위한 별명같은 용도로 사용됩니다.)과 플랫폼을 선택합니다.</p><p><img src="../../../../images/admob/3.png" alt=""><br>앱을 생성하면 앱 리스트에 노출되며, 앱이름을 클릭해서 더 상세한 설정을 할 수 있습니다.</p><p><img src="../../../../images/admob/4.png" alt=""><br>광고 단위 만들기 버튼을 통해 광고 단위를 생성합니다.</p><p><img src="../../../../images/admob/5.png" alt=""><br>현재 배너, 전면, 리워드 이렇게 3가지 광고 타입을 제공합니다. 앱의 사용성을 선택해서 선택하면 되는데, 저는 배너를 사용했습니다.</p><p><img src="../../../../images/admob/6.png" alt=""><br>광고 단위 이름을 입력해줍니다.</p><p><img src="../../../../images/admob/7.png" alt=""><br>광고 단위가 생성되었습니다. 이제 AppID와 UnitID를 통해 앱에 광고를 부착할 수 있습니다.<br>이 페이지에서 2개의 ID값을 볼 수 있는데요, 위에가 AppID, 아래가 UnitID입니다.</p><ul><li>AppID : 앱의 Identifier, AppDelegate.m 에서 설정에 필요</li><li>UnitID : 배너 광고를 띄울 뷰컨트롤러 설정에 필요</li></ul><h2 id="CocoaPods-설치"><a href="#CocoaPods-설치" class="headerlink" title="CocoaPods 설치"></a>CocoaPods 설치</h2><p>이제 앱에 배너광고를 설치합니다.<br><code>Podfile</code>에 아래 Pod를 추가하고 <code>Pod install</code>을 통해 SDK를 설치합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;Google-Mobile-Ads-SDK&apos;</span><br></pre></td></tr></table></figure><h2 id="App-Delegate-설정"><a href="#App-Delegate-설정" class="headerlink" title="App Delegate 설정"></a>App Delegate 설정</h2><p>AppDelegate.m 파일을 열어주세요.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;GoogleAnalytics/GAI.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>위 헤더파일이 필요합니다.</p><p>아래 코드와 같이 <code>didFinishLaunchingWithOptions</code> 메소드에 애드몹을 설정하는 코드를 추가합니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</span><br><span class="line">    <span class="comment">// Override point for customization after application launch.</span></span><br><span class="line">    </span><br><span class="line">    [GADMobileAds configureWithApplicationID:<span class="string">@"애드몹AppId"</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Banner-영역-설정하기"><a href="#Banner-영역-설정하기" class="headerlink" title="Banner 영역 설정하기"></a>Banner 영역 설정하기</h2><p><img src="../../../../images/admob/8.png" alt=""></p><p>스토리보드에서 Banner영역을 잡아줍니다.<br>저는 화면 아래쪽에 배치했습니다. Banner의 Size는 <code>320 * 50</code>으로 지정해주셔야합니다. 그리고 그 View 의 CustomClass를 <code>GADBannerView</code>로 설정합니다.</p><p>이제 코드영역에서 해당 뷰에 UnitID를 지정해줘야 합니다. 이 작업은 <code>ViewDidLoad</code> 에서 작업합니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.bannerView.adUnitID = admobBannerUnitId;</span><br><span class="line"><span class="keyword">self</span>.bannerView.rootViewController = <span class="keyword">self</span>;</span><br><span class="line">[<span class="keyword">self</span>.bannerView loadRequest:[GADRequest request]];</span><br></pre></td></tr></table></figure><p>여기에서 self.bannerView는 스토리보드에서 IBOutlet으로 가져온 GADBannerView 입니다.<br><code>admobBannerUnitId</code> 을 발급받은 UnitID로 변경합니다.</p><ul><li>추가적으로, bannerView에 델리게이트를 지정하여 광고를 성공적으로 가져왔는지, 문제가 있는지 등의 결과를 받을 수 있습니다. 해당내용은 아래에 링크합니다.<br><a href="https://developers.google.com/admob/ios/banner" target="_blank" rel="noopener">https://developers.google.com/admob/ios/banner</a></li></ul><h2 id="Test-광고-붙여보기"><a href="#Test-광고-붙여보기" class="headerlink" title="Test 광고 붙여보기"></a>Test 광고 붙여보기</h2><p>위 과정까지 진행하고 앱을 실행시켜보면 광고가 뜨지 않습니다. 왜냐하면 <code>Debug</code> 모드에서는 광고가 노출되지 않기 때문이죠. 그러면 어떻게 광고가 잘 노출되는지 확인할 수 있을까요.<br>ADMob에서는 테스트 광고를 제공합니다.</p><p>발급받은 AppID와 UnitID중에서 UnitID를 <code>ca-app-pub-3940256099942544/6300978111</code> 로 변경합니다.</p><p>위 테스트 UnitID는 배너 타입의 광고에만 유효하며 그 외 타입은 다음 링크를 참고해주세요.<br><a href="https://developers.google.com/admob/android/test-ads" target="_blank" rel="noopener">https://developers.google.com/admob/android/test-ads</a></p><p>이제 앱을 다시 실행해보면 테스트 광고가 노출되는 것을 확인할 수 있습니다.</p><ul><li>빌드 과정에서 <code>Release</code> config로 빌드하는 경우 실제 UnitID를 사용하고, <code>Debug</code>로 빌드하는 경우 테스트용 UnitID를 사용하게 설정해두면 편합니다!</li></ul><h2 id="더-나아가서"><a href="#더-나아가서" class="headerlink" title="더 나아가서"></a>더 나아가서</h2><p>ADMob에서는 더 다양한 기능을 제공합니다.<br>예를들면 광고를 불러오기 전까지는 배너 영역을 갖고있지 않다가, 광고를 받아오면 해당 배너영역을 확장시켜 보여줄 수도 있습니다.</p>]]></content>
    
    <summary type="html">
    
      앱을 다 만들었다면 수익에 도전해보자
모바일 어플리케이션에 광고를 부착할 수 있는 다양한 플랫폼이 있다. 그중에서도 Google의 Admob을 이용한 방법을 소개합니다.

Admob 가입하기
https://www.google.co.kr/admob 구글 애드몹 페이지

구글 계정으로 로그인 할 수 있습니다.

광고 생성하기
우선 애드몹 페이지에서 광고를 붙일 앱을 설정합니다. 앱 추가 버튼을 통해 추가할 수 있습니다.


광고를 부착할 앱이 기존에 스토어에 등록되어있던 앱인지, 새로 만들 앱인지 선택합니다. 저는 아직 스토어에 업로드
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Admob" scheme="http://monibu1548.github.io/tags/Admob/"/>
    
      <category term="애드몹" scheme="http://monibu1548.github.io/tags/%EC%95%A0%EB%93%9C%EB%AA%B9/"/>
    
  </entry>
  
  <entry>
    <title>Interface Builder IBOutlet연결에 Strong과 Weak 어떤것을 써야할까?</title>
    <link href="http://monibu1548.github.io/2018/05/03/iboutlet-strong-weak/"/>
    <id>http://monibu1548.github.io/2018/05/03/iboutlet-strong-weak/</id>
    <published>2018-05-03T11:34:36.000Z</published>
    <updated>2018-05-05T19:08:53.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IBOutlet의-Strong-vs-Weak"><a href="#IBOutlet의-Strong-vs-Weak" class="headerlink" title="IBOutlet의 Strong vs Weak"></a>IBOutlet의 Strong vs Weak</h2><p>Interface Builder를 사용하는 프로젝트에서 View를 코드상에서 제어하기 위해 <code>IBOutlet</code>으로 <code>스토리보드</code> <-> <code>코드</code> 를 연결하게 됩니다.<br><code>Ctrl</code>키를 누르고 View를 .m 또는 .h 파일로 가져오면 다음과 같이 IBOutlet 연결 팝업이 뜹니다.<br><img src="../../../../images/iboutlet/1.png" alt=""></-></p><p>여기에서 아마도 Property명 또는 Action명을 입력 후 <code>Connect</code> 버튼을 눌러 커넥션을 생성하셨을텐데요.<br>혹시, 아래쪽의 <code>Storage</code> 영역을 확인해보신적이 있으신가요?</p><p>아마도 디폴트 값은 <code>Weak</code> 일겁니다.</p><p>여기에서 Strong, Weak 는 ARC(Auto Reference Count)와 관련이 깊습니다.<br>Strong, Weak에 대한 자세한 내용은 다른 포스트에서 다루도록 하겠습니다.</p><p>간단히 소개하자면, <code>Strong</code>은 소유대상의 reference count를 1 증가시킴으로써 dealloc 되지 않도록 하고, <code>Weak</code> 는 reference count는 증가시키지 않고 소유함으로써 상호참조 발생을 막아 메모리 누수를 막기위해 사용합니다.</p><h2 id="Dafault는-Weak니까-당연히-Weak을-써야지"><a href="#Dafault는-Weak니까-당연히-Weak을-써야지" class="headerlink" title="Dafault는 Weak니까 당연히 Weak을 써야지?"></a>Dafault는 Weak니까 당연히 Weak을 써야지?</h2><p>네, 아마 커넥션 팝업에서 디폴트로 <code>Weak</code>가 선택되어 있습니다. 왜 <code>Weak</code>가 디폴트일까요?</p><p><code>Strong</code> 으로 사용할 때 문제가 있는지 먼저 살펴보겠습니다.<br><code>ViewController</code>, <code>View</code>, <code>Label</code> 이 3가지 요소로 확인해보도록 하겠습니다.</p><h3 id="IBOutlet에-Strong을-사용한-경우-시나리오"><a href="#IBOutlet에-Strong을-사용한-경우-시나리오" class="headerlink" title="IBOutlet에 Strong을 사용한 경우 시나리오"></a>IBOutlet에 Strong을 사용한 경우 시나리오</h3><p><img src="../../../../images/iboutlet/strong.png" alt=""><br>위 사진과 같이 <code>Strong</code>으로 연결을 한 경우</p><p>Reference Count를 계산해봅시다.</p><ul><li>코드에서 ViewController가 <code>Strong</code>으로 aView를 소유하므로 =&gt; aView:1</li><li>Interface Builder에서 aView가 <code>Label</code> subView로 소유하므로 =&gt; aView:1, Label:1</li><li>코드에서 ViewController가 <code>Strong</code>으로 Label을 소유하므로 =&gt; aView:1, Label:2</li></ul><p>그렇다면 여기에서 메모리 누수가 발생할 가능성이 있을까요?</p><h2 id="ViewController가-dealloc-된다고-가정해보면"><a href="#ViewController가-dealloc-된다고-가정해보면" class="headerlink" title="ViewController가 dealloc 된다고 가정해보면"></a>ViewController가 dealloc 된다고 가정해보면</h2><p>ViewController가 dealloc되는 시나리오로 다시 Reference Count를 계산해봅니다.</p><ul><li>ViewController가 dealloc되므로 소유하고 있던 <code>aView</code>의 reference count를 감소 =&gt; aView:0  (<code>aView의 Reference Count가 0이 되어 dealloc 됩니다</code>)</li><li><code>Label</code>을 소유하던 <code>aView</code>가 dealloc 되므로 <code>Label</code>의 reference Count 감소 =&gt; aView:<code>dealloc 됨</code>, Label:1</li><li>ViewController가 dealloc되므로 소유하고 있던 <code>Label</code> reference Count 감소 =&gt; aView:<code>dealloc 됨</code>, Label:0 <code>Label의 Reference Count가 0이 되어 dealloc 됩니다</code>)</li></ul><p>모두가 깔끔하게 Dealloc 되는 <code>해피앤딩</code> 입니다.<br>이렇듯 IBOutlet에 <code>Strong</code> 을 쓴다고 해서 잘못된 일은 아닙니다.</p><p>오히려 <code>Strong</code>을 써야하는 경우가 있습니다!!!</p><h2 id="IBOutlet에-Strong을-써야-하는-경우"><a href="#IBOutlet에-Strong을-써야-하는-경우" class="headerlink" title="IBOutlet에 Strong을 써야 하는 경우"></a>IBOutlet에 Strong을 써야 하는 경우</h2><p>복잡한 뷰 Hierarchy를 가진 경우에는 <code>Weak</code> 대신 <code>Strong</code>을 써야만 하는 경우도 존재합니다.<br>깊은 뷰 Hierarchy 구조에서 모든 Connection이 <code>Weak</code>라고 한다면 중간쯤 있는 <code>View</code>가 어느 이유에서인지 <code>dealloc</code>이 된다면? 그 하위뷰들도 함께 <code>dealloc</code>이 됩니다.<br>만약 복잡한 뷰 Hierechy 구조상에서 subview의 subview를 사용해야 하는 경우. 의도치 않은 nil을 경험할 수도 있습니다. 일반적이지는 않지만 충분히 겪을 수 있습니다.</p><h2 id="그러면-Strong이-복잡한-Hierarchy에도-문제없고-메모리-누수도-없으니-무조건-Strong을-쓰면-되나요"><a href="#그러면-Strong이-복잡한-Hierarchy에도-문제없고-메모리-누수도-없으니-무조건-Strong을-쓰면-되나요" class="headerlink" title="그러면 Strong이 복잡한 Hierarchy에도 문제없고, 메모리 누수도 없으니 무조건 Strong을 쓰면 되나요?"></a>그러면 Strong이 복잡한 Hierarchy에도 문제없고, 메모리 누수도 없으니 무조건 Strong을 쓰면 되나요?</h2><p><code>아뇨</code></p><p>Default 값이 <code>Weak</code>인 이유가 또 있겠죠. 좀 더 일반적인 상황에서 <code>Weak</code>가 유리한 상황이 존재합니다.</p><p>바로 <code>메모리 부족</code></p><p>메모리가 부족하면 ViewController의 <code>didReceiveMemoryWarning</code>가 호출됩니다.<br>보통 <code>didReceiveMemoryWarning</code> 에서 main view를 <code>nil</code> 처리함으로써 main view를 포함한 subview들 까지 모두 dealloc 하여 메모리를 확보하는 동작을 구현합니다.</p><p>이 경우에 IBOutlet <code>Strong</code> 으로 Subview들을 갖고있다면, ViewController가 <code>Strong</code>으로 갖고있는 <code>Reference Count 1</code> 때문에 절대 최소 1 이하로 내려가질 않습니다.<br>즉, 그 Subview의 ParentView가 nil이 되더라도 SubView는 dealloc되지 않게 됩니다. 보이지도 않는 뷰가 메모리를 차지하게 되어버리는 것이죠.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>디폴트로 <code>Weak</code>을 사용하는게 좋습니다. 그 외 정말 위에서 소개한 특별한 상황 (복잡한 뷰 Hierarchy)를 이해하고 정말 필요할 때 <code>Strong</code>으로 사용하시면 됩니다.</p>]]></content>
    
    <summary type="html">
    
      IBOutlet의 Strong vs Weak
Interface Builder를 사용하는 프로젝트에서 View를 코드상에서 제어하기 위해 IBOutlet으로 스토리보드 코드 를 연결하게 됩니다.
Ctrl키를 누르고 View를 .m 또는 .h 파일로 가져오면 다음과 같이 IBOutlet 연결 팝업이 뜹니다.


여기에서 아마도 Property명 또는 Action명을 입력 후 Connect 버튼을 눌러 커넥션을 생성하셨을텐데요.
혹시, 아래쪽의 Storage 영역을 확인해보신적이 있으신가요?

아마도 디폴트 값은 Weak 일겁니다.

여
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Interface Builder" scheme="http://monibu1548.github.io/tags/Interface-Builder/"/>
    
      <category term="Storyboard" scheme="http://monibu1548.github.io/tags/Storyboard/"/>
    
  </entry>
  
  <entry>
    <title>[Objective-C] NSXMLParser로 XML Object Mapper 구현하기 (공공데이터 Response 파싱하기)</title>
    <link href="http://monibu1548.github.io/2018/05/01/xml-mapper/"/>
    <id>http://monibu1548.github.io/2018/05/01/xml-mapper/</id>
    <published>2018-05-01T14:32:01.000Z</published>
    <updated>2018-05-01T15:40:56.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="공공데이터-Open-API"><a href="#공공데이터-Open-API" class="headerlink" title="공공데이터 Open API"></a>공공데이터 Open API</h2><p><code>data.go.kr</code>에서 다양한 공공데이터 정보를 얻을 수 있습니다. 단순 데이터 파일 또는 Open API형태로 제공하고 있어서 이를 이용해 다양한 서비스를 구현할 수 있습니다.<br>지역 미세먼지 농도, 날씨 예보, 수질 정보 등등 정말 다양한 정보를 얻을 수 있는데요, 스터디용도로 이 API 중 하나를 선택해서 앱을 구현중입니다.</p><h2 id="지방선거-API-활용하기"><a href="#지방선거-API-활용하기" class="headerlink" title="지방선거 API 활용하기"></a>지방선거 API 활용하기</h2><p>가장 최신으로 등록된 API를 찾아보니 곧 6월 13일 지방선거를 앞두고 선거정보, 후보자 정보 Open API가 추가되어서 활용해보기로 했습니다.<br>역시 공공데이터 답게 Response API는 <code>XML</code>을 지원합니다.. 제발 <code>json</code>을 사용해주세요 ㅠㅜ</p><p><code>XML</code> 보다 <code>json</code>을 선호하는 이유는 다음과 같습니다.</p><ul><li><code>json</code>은 dict, list, string, number의 타입으로 구성되어 있죠. Objective-C 에서 사용하는 데이터 타입과 다르지 않아요. 그래서 json을 object로 매핑해주기 편합니다!</li><li><code>xml</code>은 list 타입이 없죠, 같은 depth에 동일한 태그가 여러개 구성되어 있는걸 list라고 판단해야 합니다. 우연히 해당 태그가 1개만 오면 이게 단순 key-value인지 list인지 알 방법이 없죠.</li></ul><h2 id="XML-파싱하기"><a href="#XML-파싱하기" class="headerlink" title="XML 파싱하기"></a>XML 파싱하기</h2><p>Objective-C 에서는 <code>NSXMLParser</code> 라는 클래스를 제공하여 쉽게 XML을 파싱할 수 있도록 도와주고 있습니다.<br>NSXMLParser로 XML을 파싱하는 순서는 다음과 같습니다.</p><ol><li>NSXMLParser에 파싱할 XML데이터 주입</li><li><code>parse</code> 메소드 호출</li><li>NSXMLParser의 델리게이트 호출 (문서 시작, 태그 시작, 태그 끝, 문서 종료 등..)</li></ol><h2 id="NSXMLParser-Delegate"><a href="#NSXMLParser-Delegate" class="headerlink" title="NSXMLParser Delegate"></a>NSXMLParser Delegate</h2><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parserDidStartDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML 문서가 시작했음을 알리는 Delegate입니다. 처음 1회만 수행합니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didStartElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName attributes:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *&gt; *)attributeDict &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;태그&gt;</code> 를 발견했을 때 호출됩니다. elementName값으로 <code>태그</code>가 넘어옵니다.<br><code>&lt;태그 속성=값&gt;</code> 의 형식으로 된 XML태그의 경우 attributes dict 파라미터로 @{ @”속성”, @”값” } 이 전달됩니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didEndElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&lt;/태그&gt;</code> 를 발견했을 때 호출됩니다. elementName 값으로 <code>태그</code>가 넘어옵니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser foundCharacters:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>일반 문자열을 발견했을 때 호출됩니다.<br><code>&lt;태그&gt;안녕하세요&lt;/태그&gt;</code> 이 경우에 <code>didStartElement</code> 로 <code>태그</code> 값을 읽은 후 <code>foundCharacters</code> 메소드로 안, 녕, 하, 세, 요 가 한글자씩 전달됩니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parserDidEndDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">&#125;</span><br><span class="line">XML 문서가 끝났을 때 호출됩니다.</span><br></pre></td></tr></table></figure><ul><li>5개 Delegate 외에 파싱 에러 등 다른 메소드도 있지만 option으로 꼭 구현이 필요하진 않습니다</li></ul><h2 id="XML-Parsing-코드"><a href="#XML-Parsing-코드" class="headerlink" title="XML Parsing 코드"></a>XML Parsing 코드</h2><p>선거 정보 API 에서 내려오는 XML 예제는 다음과 같습니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">response</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultCode</span>&gt;</span>INFO-00<span class="tag">&lt;/<span class="name">resultCode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resultMsg</span>&gt;</span>NORMAL SERVICE<span class="tag">&lt;/<span class="name">resultMsg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">num</span>&gt;</span>1<span class="tag">&lt;/<span class="name">num</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgId</span>&gt;</span>20180613<span class="tag">&lt;/<span class="name">sgId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgName</span>&gt;</span>제7회 전국동시지방선거<span class="tag">&lt;/<span class="name">sgName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgTypecode</span>&gt;</span>0<span class="tag">&lt;/<span class="name">sgTypecode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgVotedate</span>&gt;</span>20180613<span class="tag">&lt;/<span class="name">sgVotedate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">num</span>&gt;</span>2<span class="tag">&lt;/<span class="name">num</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgId</span>&gt;</span>220180613<span class="tag">&lt;/<span class="name">sgId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgName</span>&gt;</span>국회의원선거<span class="tag">&lt;/<span class="name">sgName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgTypecode</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sgTypecode</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sgVotedate</span>&gt;</span>20180613<span class="tag">&lt;/<span class="name">sgVotedate</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">numOfRows</span>&gt;</span>10<span class="tag">&lt;/<span class="name">numOfRows</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pageNo</span>&gt;</span>1<span class="tag">&lt;/<span class="name">pageNo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">totalCount</span>&gt;</span>10<span class="tag">&lt;/<span class="name">totalCount</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">response</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>중간에 <code>&lt;item&gt;</code> 이 엄청 많이 나오는데 list를 표현하기위해 2개만 남기고 나머지는 생략처리했습니다.</li></ul><p>위 XML에 매핑할 Object는 다음과 같이 작성했습니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  EHElectionSchedule.h</span></span><br><span class="line"><span class="comment">//  ElectionHelper</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by JingyuJung on 2018. 4. 29..</span></span><br><span class="line"><span class="comment">//  Copyright © 2018년 JingyuJung. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionSchedule</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *sgId;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *sgName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *sgTypecode;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *sgVotedate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionSchedule_XMLArray</span> : <span class="title">NSMutableArray</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionScheduleResponseHeader</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *resultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionScheduleItems</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EHElectionSchedule_XMLArray *item;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionScheduleResponseBody</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EHElectionScheduleItems *items;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionScheduleResponse</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EHElectionScheduleResponseHeader *header;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EHElectionScheduleResponseBody *body;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHElectionScheduleResponseContainer</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) EHElectionScheduleResponse *response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>클래스를 읽는 방향은 아래쪽부터 위로 읽어가면 됩니다.<br>규칙은 다음과 같습니다. </p><ul><li>클래스는 XML에서 1 Depth를 의미합니다.</li><li>프로퍼티명은 XML에서 tag 값과 일치해야 합니다.</li><li><code>Array Type</code> 을 표현할 경우 <code>{Array에 담길 클래스}{Array타입임을 알릴 Suffix}</code> 의 클래스를 추가적으로 선언해야 합니다. Suffix에 <code>_XMLArray</code>를 사용한 이유는 Parser코드에서 볼 수 있습니다.</li><li>프로퍼티의 클래스 타입은 Custom, NSString, NSNumber 입니다. (Primitive 타입 지원하지 않습니다.. 못합니다 ㅠㅜ)</li></ul><h2 id="XML-Parser"><a href="#XML-Parser" class="headerlink" title="XML Parser"></a>XML Parser</h2><p>우선 Full Code 입니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  EHXMLSerializer.m</span></span><br><span class="line"><span class="comment">//  ElectionHelper</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by JingyuJung on 2018. 4. 29..</span></span><br><span class="line"><span class="comment">//  Copyright © 2018년 JingyuJung. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"EHXMLSerializer.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHXMLSerializer</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSXMLParser</span> *parser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span>&lt;<span class="keyword">id</span>&gt; *keyStack;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableString</span> *value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Class wrapperClass;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kEHXMLArraySuffix = <span class="string">@"_XMLArray"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EHXMLSerializer</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Constructor</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)serializer &#123;</span><br><span class="line">    <span class="keyword">static</span> EHXMLSerializer *shared = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        shared = [[EHXMLSerializer alloc] init];</span><br><span class="line">        [shared EH_initializeXMLParser];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Public</span></span><br><span class="line">- (<span class="keyword">id</span>)modelWithXMLResponse:(<span class="built_in">NSURLResponse</span> *)response &#123;</span><br><span class="line">    [_parser parse];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Private</span></span><br><span class="line">- (<span class="keyword">void</span>)EH_initializeXMLParser &#123;</span><br><span class="line">    _parser = [[<span class="built_in">NSXMLParser</span> alloc] init];</span><br><span class="line">    _parser.delegate = <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)responseObjectForResponse:(<span class="built_in">NSURLResponse</span> *)response data:(<span class="built_in">NSData</span> *)data error:(<span class="built_in">NSError</span> *__autoreleasing  _Nullable *)error &#123;</span><br><span class="line">    <span class="built_in">NSError</span> *anError = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![_responseClass isSubclassOfClass:<span class="built_in">NSData</span>.class]) &#123;</span><br><span class="line">        <span class="built_in">NSXMLParser</span> *parser = [[<span class="built_in">NSXMLParser</span> alloc] initWithData:data];</span><br><span class="line">        <span class="keyword">if</span> (parser &amp;&amp; !anError) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_responseClass) &#123;</span><br><span class="line">                parser.delegate = <span class="keyword">self</span>;</span><br><span class="line">                [parser parse];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - NSXMLParserDelegate</span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)parserDidStartDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">    _result = [[_responseClass alloc] init];</span><br><span class="line">    _keyStack = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    [_keyStack addObject:_result];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didStartElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName attributes:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *&gt; *)attributeDict &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSObject</span> *parentObject = _keyStack.lastObject;</span><br><span class="line">    Class propertyClass = [<span class="keyword">self</span> EH_classWithParentObject:parentObject propertyName:elementName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyClass) &#123;</span><br><span class="line">        <span class="keyword">id</span> childObject;</span><br><span class="line">        <span class="keyword">if</span> (propertyClass == [<span class="built_in">NSNumber</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">            <span class="comment">// NSNumber의 경우 init 제공 X =&gt; nil 방지처리</span></span><br><span class="line">            childObject = [[<span class="built_in">NSNumber</span> alloc] initWithInt:<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="built_in">NSStringFromClass</span>(propertyClass) hasSuffix:kEHXMLArraySuffix]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *elementClassString = [<span class="built_in">NSStringFromClass</span>(propertyClass) stringByReplacingOccurrencesOfString:kEHXMLArraySuffix withString:<span class="string">@""</span>];</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *array = [parentObject valueForKey:elementName];</span><br><span class="line">            <span class="keyword">if</span> (![array isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [_keyStack addObject:[<span class="built_in">NSMutableArray</span> array]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [_keyStack addObject:array];</span><br><span class="line">            &#125;</span><br><span class="line">            propertyClass = <span class="built_in">NSClassFromString</span>(elementClassString);</span><br><span class="line">            childObject = [[propertyClass alloc] init];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childObject = [[propertyClass alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        [_keyStack addObject:childObject];</span><br><span class="line">        _value = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didEndElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSObject</span> *parentObject = [_keyStack objectAtIndex:_keyStack.count - <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *wrapperArray;</span><br><span class="line">    <span class="built_in">BOOL</span> isArrayType = [parentObject isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]];</span><br><span class="line">    <span class="keyword">if</span> (isArrayType) &#123;</span><br><span class="line">        wrapperArray = (<span class="built_in">NSMutableArray</span> *)parentObject;</span><br><span class="line">        parentObject = [_keyStack objectAtIndex:_keyStack.count - <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Class propertyClass = [<span class="keyword">self</span> EH_classWithParentObject:parentObject propertyName:elementName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!propertyClass) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> value = [_value length] ? _value : _keyStack.lastObject;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isArrayType) &#123;</span><br><span class="line">        [(<span class="built_in">NSMutableArray</span> *)wrapperArray addObject:_keyStack.lastObject];</span><br><span class="line">        [_keyStack removeLastObject];</span><br><span class="line">        value = wrapperArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [parentObject setValue:value forKey:elementName];</span><br><span class="line">    [_keyStack removeLastObject];</span><br><span class="line">    _value = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser foundCharacters:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">    [_value appendString:string];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)parserDidEndDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">    _result = _keyStack.firstObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)EH_classWithParentObject:(<span class="built_in">NSObject</span> *)object propertyName:(<span class="built_in">NSString</span> *)propertyName &#123;</span><br><span class="line">    </span><br><span class="line">    Class objectClass = object.class;</span><br><span class="line">    Class result;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> propertiesCount = <span class="number">0</span>;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList(objectClass, &amp;propertiesCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; propertiesCount; index++) &#123;</span><br><span class="line">        objc_property_t property = properties[index];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *cname = property_getName(property);</span><br><span class="line">        <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:cname];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ([name isEqualToString:propertyName]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *type = property_getAttributes(property);</span><br><span class="line">            <span class="built_in">NSString</span> *typeString = [<span class="built_in">NSString</span> stringWithUTF8String:type];</span><br><span class="line">            <span class="built_in">NSArray</span> *attributes = [typeString componentsSeparatedByString:<span class="string">@","</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *typeAttribute = [attributes objectAtIndex:<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *propertyType = [typeAttribute substringFromIndex:<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *propertyClass = [<span class="keyword">self</span> EH_removeNotNeededChar:propertyType];</span><br><span class="line"></span><br><span class="line">            result = <span class="built_in">NSClassFromString</span>(propertyClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)EH_removeNotNeededChar:(<span class="built_in">NSString</span> *)originString &#123;</span><br><span class="line">    <span class="keyword">if</span> (originString.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([[originString substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">2</span>)] isEqualToString:<span class="string">@"@\""</span>] &amp;&amp;</span><br><span class="line">        [[originString substringWithRange:<span class="built_in">NSMakeRange</span>(originString.length - <span class="number">1</span>, <span class="number">1</span>)] isEqualToString:<span class="string">@"\""</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [originString substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">2</span>, originString.length - <span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>이제 구간별로 살펴보겠습니다.</p><ul><li>라인 : <code>13 - 23</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">EHXMLSerializer</span> ()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSXMLParser</span> *parser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span>&lt;<span class="keyword">id</span>&gt; *keyStack;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableString</span> *value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) Class wrapperClass;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="keyword">id</span> result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li></ul><p>parser는 파싱을 수행할 parser<br>keyStack은 태그를 읽어나가면서 Depth를 관리하기 위한 Stack 입니다<br>value는 태그의 값을 관리하기 위한 MutableString 입니다<br>wrapperClass는 array 타입으로 된 부분을 파싱하기 위한 프로퍼티입니다<br>result는 최종 파싱 결과물이 될 프로퍼티입니다.</p><ul><li>라인 : <code>17 - 42</code></li></ul><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kEHXMLArraySuffix = <span class="string">@"_XMLArray"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">EHXMLSerializer</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Constructor</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)serializer &#123;</span><br><span class="line">    <span class="keyword">static</span> EHXMLSerializer *shared = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        shared = [[EHXMLSerializer alloc] init];</span><br><span class="line">        [shared EH_initializeXMLParser];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shared;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@&quot;_XMLArray&quot;</code> 는 해당 클래스가 XML을 파싱할 때 Array 타입으로 해야한다는 걸 알리기 위해 Model 작성할 때 명시적으로 붙였던 Suffix 입니다.<br><code>serialilzer</code> 는 GCD를 이용해 싱글톤으로 구현한 생성자입니다.</p><ul><li>라인 : <code>56 - 69</code></li></ul><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)responseObjectForResponse:(<span class="built_in">NSURLResponse</span> *)response data:(<span class="built_in">NSData</span> *)data error:(<span class="built_in">NSError</span> *__autoreleasing  _Nullable *)error &#123;</span><br><span class="line">    <span class="built_in">NSError</span> *anError = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (![_responseClass isSubclassOfClass:<span class="built_in">NSData</span>.class]) &#123;</span><br><span class="line">        <span class="built_in">NSXMLParser</span> *parser = [[<span class="built_in">NSXMLParser</span> alloc] initWithData:data];</span><br><span class="line">        <span class="keyword">if</span> (parser &amp;&amp; !anError) &#123;</span><br><span class="line">            <span class="keyword">if</span> (_responseClass) &#123;</span><br><span class="line">                parser.delegate = <span class="keyword">self</span>;</span><br><span class="line">                [parser parse];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>response 로 받아온 XML Data를 이용해서 외부에서 호출하는 메소드입니다.<br>외부에서 이 메소드를 호출하기 전에 <code>responseClass</code>에 이 XML에 매핑할 클래스를 <code>set</code> 해주는 과정이 꼬오옥 필요합니다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[EHXMLSerializer serializer] setResponseClass:[EHElectionScheduleResponseContainer <span class="keyword">class</span>]];</span><br><span class="line">        EHElectionScheduleResponseContainer *container = [[EHXMLSerializer serializer] responseObjectForResponse:response data:responseObject error:&amp;error];</span><br></pre></td></tr></table></figure><p>API 호출을 완료한 후 Model에 Mapping 하기 위해 Parser호출하는 부분</p><p><code>[parser parse]</code>에 의해 파싱이 시작됩니다.</p><ul><li>라인 : <code>73 - 77</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parserDidStartDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">    _result = [[_responseClass alloc] init];</span><br><span class="line">    _keyStack = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    [_keyStack addObject:_result];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>XML 문서 파싱을 시작할 때 호출됩니다. 파싱에 필요한 프로퍼티들을 초기화합니다. 가장 첫번째 Response 객체를 keyStack에 담는것으로 파싱을 시작합니다.</p><ul><li>라인 : <code>79 - 105</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didStartElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName attributes:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *,<span class="built_in">NSString</span> *&gt; *)attributeDict &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSObject</span> *parentObject = _keyStack.lastObject;</span><br><span class="line">    Class propertyClass = [<span class="keyword">self</span> EH_classWithParentObject:parentObject propertyName:elementName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyClass) &#123;</span><br><span class="line">        <span class="keyword">id</span> childObject;</span><br><span class="line">        <span class="keyword">if</span> (propertyClass == [<span class="built_in">NSNumber</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">            childObject = [[<span class="built_in">NSNumber</span> alloc] initWithInt:<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="built_in">NSStringFromClass</span>(propertyClass) hasSuffix:kEHXMLArraySuffix]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *elementClassString = [<span class="built_in">NSStringFromClass</span>(propertyClass) stringByReplacingOccurrencesOfString:kEHXMLArraySuffix withString:<span class="string">@""</span>];</span><br><span class="line">            <span class="built_in">NSMutableArray</span> *array = [parentObject valueForKey:elementName];</span><br><span class="line">            <span class="keyword">if</span> (![array isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [_keyStack addObject:[<span class="built_in">NSMutableArray</span> array]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [_keyStack addObject:array];</span><br><span class="line">            &#125;</span><br><span class="line">            propertyClass = <span class="built_in">NSClassFromString</span>(elementClassString);</span><br><span class="line">            childObject = [[propertyClass alloc] init];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            childObject = [[propertyClass alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        [_keyStack addObject:childObject];</span><br><span class="line">        _value = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>XML 에서 태그를 발견하면 keyStack의 lastObject (1 depth 상위 클래스) 에 포함된 프로퍼티인지 확인합니다. 없다면 굳이 매핑이 필요없으므로 패스!<br>포함되어있다면 해당 프로퍼티의 클래스를 판별하고 할당하여 keyStack에 담아둡니다. <code>_value</code> NSMutableString 을 할당하여 값을 읽을 준비를 합니다.</p><ul><li>라인 : <code>136 - 138</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser foundCharacters:(<span class="built_in">NSString</span> *)string &#123;</span><br><span class="line">    [_value appendString:string];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>태그 사이의 값들을 <code>_value</code> 에  appending해 나가면서 값을 완성시켜 나갑니다.</p><ul><li>라인 : <code>107 - 134</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parser:(<span class="built_in">NSXMLParser</span> *)parser didEndElement:(<span class="built_in">NSString</span> *)elementName namespaceURI:(<span class="built_in">NSString</span> *)namespaceURI qualifiedName:(<span class="built_in">NSString</span> *)qName &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSObject</span> *parentObject = [_keyStack objectAtIndex:_keyStack.count - <span class="number">2</span>];</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *wrapperArray;</span><br><span class="line">    <span class="built_in">BOOL</span> isArrayType = [parentObject isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]];</span><br><span class="line">    <span class="keyword">if</span> (isArrayType) &#123;</span><br><span class="line">        wrapperArray = (<span class="built_in">NSMutableArray</span> *)parentObject;</span><br><span class="line">        parentObject = [_keyStack objectAtIndex:_keyStack.count - <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Class propertyClass = [<span class="keyword">self</span> EH_classWithParentObject:parentObject propertyName:elementName];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!propertyClass) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">id</span> value = [_value length] ? _value : _keyStack.lastObject;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isArrayType) &#123;</span><br><span class="line">        [(<span class="built_in">NSMutableArray</span> *)wrapperArray addObject:_keyStack.lastObject];</span><br><span class="line">        [_keyStack removeLastObject];</span><br><span class="line">        value = wrapperArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [parentObject setValue:value forKey:elementName];</span><br><span class="line">    [_keyStack removeLastObject];</span><br><span class="line">    _value = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>태그가 끝나면 keyStack의 마지막 object에 값을 KVC로 셋하고 _keyStack에서 완성된 lastObject를 제거합니다.<br>만약 부모클래스가 Array 타입이었다면 현재 완성된 클래스를 Array에 추가시켜줍니다.</p><ul><li>라인 : <code>140 - 142</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)parserDidEndDocument:(<span class="built_in">NSXMLParser</span> *)parser &#123;</span><br><span class="line">    _result = _keyStack.firstObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>XML 문서가 끝나면 최종적으로 keyStack에는 최상위 클래스가 남게됩니다. 따라서 result에 _keyStack의 firstObject를 연결합니다.</p><ul><li>라인 : <code>144 - 172</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">- (Class)EH_classWithParentObject:(<span class="built_in">NSObject</span> *)object propertyName:(<span class="built_in">NSString</span> *)propertyName &#123;</span><br><span class="line">    </span><br><span class="line">    Class objectClass = object.class;</span><br><span class="line">    Class result;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> propertiesCount = <span class="number">0</span>;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList(objectClass, &amp;propertiesCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; propertiesCount; index++) &#123;</span><br><span class="line">        objc_property_t property = properties[index];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *cname = property_getName(property);</span><br><span class="line">        <span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:cname];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ([name isEqualToString:propertyName]) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *type = property_getAttributes(property);</span><br><span class="line">            <span class="built_in">NSString</span> *typeString = [<span class="built_in">NSString</span> stringWithUTF8String:type];</span><br><span class="line">            <span class="built_in">NSArray</span> *attributes = [typeString componentsSeparatedByString:<span class="string">@","</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *typeAttribute = [attributes objectAtIndex:<span class="number">0</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *propertyType = [typeAttribute substringFromIndex:<span class="number">1</span>];</span><br><span class="line">            <span class="built_in">NSString</span> *propertyClass = [<span class="keyword">self</span> EH_removeNotNeededChar:propertyType];</span><br><span class="line"></span><br><span class="line">            result = <span class="built_in">NSClassFromString</span>(propertyClass);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>해당 obejct에 propertyName이라는 변수명을 가진 프로퍼티의 클래스를 리턴해주는 함수입니다.<br>Objective-C의 인스트로펙션, 자바에서 리플렉션이라 불리는 기능을 이용해 구현합니다.</p><ul><li>라인 : <code>174 - 183</code><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)EH_removeNotNeededChar:(<span class="built_in">NSString</span> *)originString &#123;</span><br><span class="line">    <span class="keyword">if</span> (originString.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([[originString substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, <span class="number">2</span>)] isEqualToString:<span class="string">@"@\""</span>] &amp;&amp;</span><br><span class="line">        [[originString substringWithRange:<span class="built_in">NSMakeRange</span>(originString.length - <span class="number">1</span>, <span class="number">1</span>)] isEqualToString:<span class="string">@"\""</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [originString substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">2</span>, originString.length - <span class="number">3</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>runtime 메소드를 이용해 property의 클래스 타입을 가져왔을 때, @\”\” 의 불필요한 문자열이 추가되기 때문에 제거를 위해 만든 함수입니다.</p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p>위에서 만든 XMl Serializer를 이용해 XML을 매핑하면 다음과 같은 결과를 얻을 수 있습니다.<br><img src="../../../../images/xmlparser/1.png" alt=""></p><p><code>더 보완이 필요한 내용</code></p><ul><li>현재 최종 마지막 타입은 <code>NSString</code> 과 <code>NSNumber</code> 만 지원하고 있는데, <code>NSDate</code> 도 추가가 필요합니다!</li></ul>]]></content>
    
    <summary type="html">
    
      공공데이터 Open API
data.go.kr에서 다양한 공공데이터 정보를 얻을 수 있습니다. 단순 데이터 파일 또는 Open API형태로 제공하고 있어서 이를 이용해 다양한 서비스를 구현할 수 있습니다.
지역 미세먼지 농도, 날씨 예보, 수질 정보 등등 정말 다양한 정보를 얻을 수 있는데요, 스터디용도로 이 API 중 하나를 선택해서 앱을 구현중입니다.

지방선거 API 활용하기
가장 최신으로 등록된 API를 찾아보니 곧 6월 13일 지방선거를 앞두고 선거정보, 후보자 정보 Open API가 추가되어서 활용해보기로 했습니다.
역시
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://monibu1548.github.io/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Reflection" scheme="http://monibu1548.github.io/tags/Reflection/"/>
    
      <category term="스터디" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%ED%84%B0%EB%94%94/"/>
    
      <category term="XML Parser" scheme="http://monibu1548.github.io/tags/XML-Parser/"/>
    
      <category term="NSXMLParser" scheme="http://monibu1548.github.io/tags/NSXMLParser/"/>
    
  </entry>
  
  <entry>
    <title>[Objective-C] reflection(리플렉션), Introspection(인트로스펙션) Runtime 메소드 사용하기</title>
    <link href="http://monibu1548.github.io/2018/05/01/objc-runtime/"/>
    <id>http://monibu1548.github.io/2018/05/01/objc-runtime/</id>
    <published>2018-05-01T14:18:43.000Z</published>
    <updated>2018-05-01T15:36:17.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>Objective-C에서 자바의 Reflection 에 해당하는 기능을 Introspection(인트로스펙션) 이라고 합니다.<br>이 기능들은 <code>&lt;objc/runtime.h&gt;</code> 헤더 파일에 선언되어 있으며, C 함수로 작성되어 있습니다.</p><p>사용할 수 있는 메소드는 애플 개발자 센터 가이드에서 확인 가능합니다.<br><a href="https://developer.apple.com/documentation/objectivec/objective_c_runtime?language=objc" target="_blank" rel="noopener">애플 개발자 센터 Runtime 개발 가이드</a><br>가이드 문서에서 확인할 수 있듯이 수십여 가지의 메소드로 다양한 인스트로펙션 기능을 제공하고 있습니다.</p><p>Introspection을 이용해서 다양한 기능을 구현할 수 있습니다.</p><ol><li>특정 객체가 특정 Protocol, Method이 있는지 조사하여 앱 크래시 방지</li><li>외부 API Response로 내려온 json, XML 등을 Object Model 에 매핑할 때</li></ol><h2 id="Instropection을-이용한-XMl-Object-Mapper-구현예제"><a href="#Instropection을-이용한-XMl-Object-Mapper-구현예제" class="headerlink" title="Instropection을 이용한 XMl Object Mapper 구현예제"></a>Instropection을 이용한 XMl Object Mapper 구현예제</h2><p>스터디용으로 공공데이터를 이용한 앱을 만드는 작업을 하고 있는데, 대부분의 Response형태가 <code>XML</code>로 되어 있습니다. <code>json</code> 이면 좋을텐데 ㅠㅜ<br><a href="http://monibu1548.github.io/2018/05/01/xml-mapper/">NSXMLParser로 XML Object Mapper 구현하기 (공공데이터 Response 파싱하기) 포스트 보러가기</a></p><h2 id="Parser에서-사용한-Instropection"><a href="#Parser에서-사용한-Instropection" class="headerlink" title="Parser에서 사용한 Instropection"></a>Parser에서 사용한 Instropection</h2><h3 id="class-copy-PropertyList-Class-int"><a href="#class-copy-PropertyList-Class-int" class="headerlink" title="class_copy_PropertyList(Class, int *)"></a>class_copy_PropertyList(Class, int *)</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> propertiesCount = <span class="number">0</span>;</span><br><span class="line">objc_property_t *properties = class_copyPropertyList(objectClass, &amp;propertiesCount);</span><br></pre></td></tr></table></figure><p>objectClass클래스가 가진 objc_property_t 구조체들을 array로 리턴하며 배열 갯수는 propertiesCount에 담겨집니다.<br>이렇게 반환된 <code>properties</code> 변수는 나중에 반드시 <code>free(properties)</code> 호출되어야 합니다.</p><h3 id="property-getName-objc-property-t"><a href="#property-getName-objc-property-t" class="headerlink" title="property_getName(objc_property_t)"></a>property_getName(objc_property_t)</h3><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *cname = property_getName(property);</span><br><span class="line"><span class="built_in">NSString</span> *name = [<span class="built_in">NSString</span> stringWithUTF8String:cname];</span><br></pre></td></tr></table></figure><p>프로퍼티의 이름 (클래스) 이름을 const char 타입으로 리턴합니다.<br>NSString의 stringWithUTF8String을 통해 NSString으로 wrapping 가능 합니다.</p><p>… 추가 작성 예정</p>]]></content>
    
    <summary type="html">
    
      Reflection
Objective-C에서 자바의 Reflection 에 해당하는 기능을 Introspection(인트로스펙션) 이라고 합니다.
이 기능들은 &lt;objc/runtime.h&gt; 헤더 파일에 선언되어 있으며, C 함수로 작성되어 있습니다.

사용할 수 있는 메소드는 애플 개발자 센터 가이드에서 확인 가능합니다.
애플 개발자 센터 Runtime 개발 가이드
가이드 문서에서 확인할 수 있듯이 수십여 가지의 메소드로 다양한 인스트로펙션 기능을 제공하고 있습니다.

Introspection을 이용해서 다양한 기능을 구현할 수 있
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://monibu1548.github.io/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Runtime" scheme="http://monibu1548.github.io/tags/Runtime/"/>
    
      <category term="Reflection" scheme="http://monibu1548.github.io/tags/Reflection/"/>
    
  </entry>
  
  <entry>
    <title>XCode Server를 이용한 CI(continuous integration)</title>
    <link href="http://monibu1548.github.io/2018/04/25/xcode-server-intro/"/>
    <id>http://monibu1548.github.io/2018/04/25/xcode-server-intro/</id>
    <published>2018-04-25T13:29:35.000Z</published>
    <updated>2018-05-05T19:10:04.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CI-란"><a href="#CI-란" class="headerlink" title="CI 란?"></a>CI 란?</h2><p>CI란 <code>continuous integration</code>의 약자로 지속적 통합을 뜻한다. 작업을 작은 단위로 쪼갠 뒤, 작은 단위로 개발, 지속적으로 통합하는 과정을 통한 개발 방법으로 코드 품질향상, 배포주기 단축을 목표로 한다.</p><h2 id="iOS에서의-CI"><a href="#iOS에서의-CI" class="headerlink" title="iOS에서의 CI"></a>iOS에서의 CI</h2><p>iOS 앱은 실행파일(.ipa) 하나를 Export 하는데에 인증서, 프로비저닝 등 빌드 과정에 관여하는 변수가 많아 CI를 적용하기가 까다로운 편이다.</p><p>작년까지만 해도 <code>Jenkins</code>에 <code>Xcode Plugin</code>을 붙여 빌드를 진행하고 , 그 외 OTA를 위한 manifest, archive, export, OTA 배포까지의 과정은 Shell Script를 이용해 수동으로 작업했다.</p><p>물론, 한번 세팅해두면 이후에는 손 볼 일이 거의 없긴하다.</p><p><code>그러던 어느날</code>, 앱 인증서가 만료되어, 프로비저닝과 인증서를 교체해야 하는 일이 생겼다.</p><h2 id="Jenkins에서-인증서-프로비저닝-갱신하기"><a href="#Jenkins에서-인증서-프로비저닝-갱신하기" class="headerlink" title="Jenkins에서 인증서, 프로비저닝 갱신하기"></a>Jenkins에서 인증서, 프로비저닝 갱신하기</h2><ul><li>Apple developer 사이트에서 새로운 인증서와 프로비저닝을 다운로드 받는다.</li><li>jenkins credential 페이지에서 인증서와 프로비저닝을 업로드 한다.</li><li>프로젝트 Plugin 에서 새로운 인증서와, 프로비저닝을 선택해준다.</li><li>ipa export 하는 과정에서 프로비저닝 이름을 수동으로 입력해준다.</li></ul><p><code>=&gt; 수동으로 해야할 일이 꽤 많다</code></p><p>사실 프로젝트 1개만 있으면 문제가 없다.</p><p>그런데 나는..? 프로젝트가 3개가 있다.. 그것도 dev와 appstore로 구분하면 x2, 총 6개.</p><p>이 작업을 하면서, 아 이건 아니다 싶었고 다른 CI툴을 찾아 나섰고.</p><p>마침 XCode9 가 등장하면서 XCode Server가 무료로 내장되어 업데이트 되어 XCode Server를 사용해보기로 했다.</p><h2 id="XCode-Server-설치하기"><a href="#XCode-Server-설치하기" class="headerlink" title="XCode Server 설치하기"></a>XCode Server 설치하기</h2><p>사실 설치라고 할 게 없다. XCode9 를 설치하면 XCodeServer가 내장되어 있다.<br>그렇다면 XCode Server를 활성화 시켜보자.</p><p><code>XCode</code> -&gt; <code>Preference</code> -&gt; <code>Server &amp; Bots</code><br><img src="../../../../images/xcodeserver/make1.png" alt=""></p><p>off -&gt; <code>on</code> 으로 활성화 시키자.</p><p>XCode Server의 관리자 계정을 설정하고 Next를 누르다 보면<br><img src="../../../../images/xcodeserver/make2.png" alt=""></p><p><code>끝</code></p><p><code>setting</code> : 서버 계정, 빌드 타임아웃 시간 설정<br><code>permission</code> : 봇을 생성하고 볼 수 있는 권한 설정<br><code>mail</code> : 빌드 과정에서 메일 알람을 주기 위한 메일 설정</p><p>이제 서버가 할 일은 끝났다.</p><h2 id="XCodeServer에-접속하기"><a href="#XCodeServer에-접속하기" class="headerlink" title="XCodeServer에 접속하기"></a>XCodeServer에 접속하기</h2><p>지금까지는 XCode Server를 활성화 하는 과정이었다.<br>이제 XCode에 XCode Server를 연동하여 사용하는 과정을 소개한다.</p><p>우선 XCode에 XCode Server를 연결한다.<br><code>XCode</code> -&gt; <code>Preference</code> -&gt; <code>Accounts</code><br><img src="../../../../images/xcodeserver/make3.png" alt=""></p><p>우측 하단의 <code>+</code> 를 눌러보자.</p><p><img src="../../../../images/xcodeserver/make4.png" alt=""></p><p>하단의 XCode Server 를 추가할 수 있도록 되어있다.</p><p><img src="../../../../images/xcodeserver/make5.png" alt=""></p><p>같은 맥에 XCode Server와 XCode를 구동하기 때문에 위 사진처럼 바로 목록이 뜨지만. XCode Server가 원격지에 있다면 ip를  직접 입력해줘야 한다.</p><p>그 후 XCode Server에서 권한을 부여받은 계정을 입력해주면 끝!</p><p><img src="../../../../images/xcodeserver/make6.png" alt=""></p><p>대화상자 하단에 XCode Server의 스펙을 볼 수 있다.</p><h2 id="Build-Bot-만들기"><a href="#Build-Bot-만들기" class="headerlink" title="Build Bot 만들기"></a>Build Bot 만들기</h2><p>위 과정을 통해 XCode Server를 정상적으로 추가했다면 Build Bot을 생성할 수 있다.<br>XCode Server에서는 빌드는 모두 Bot이라는 단위로 실행되며 Bot은 프로젝트 빌드 타겟과 매칭된다고 보면 된다.</p><p>이제 Bot을 만들어보자.</p><p>XCode에서 <code>Product</code> -&gt; <code>Create Bot...</code> 를 선택한다.<br><img src="../../../../images/xcodeserver/make7.png" alt=""></p><p>봇의 이름과 봇을 생성할 서버를 선택한다.<br>봇의 이름은 <code>한글</code> 도 가능하다.</p><p><img src="../../../../images/xcodeserver/make8.png" alt=""><br>봇을 생성하려는 프로젝트가 git을 사용중이라면 그 내용을 자동으로 긁어온다.<br>현재 빨간색으로 <code>레포지토리 권한이 없습니다</code> 라고 뜨는데 오른쪽의 <code>Sign in</code> 으로 레포지토리 로그인을 하면 해결된다.</p><p><img src="../../../../images/xcodeserver/make9.png" alt=""><br>로그인을 완료하면 브랜치를 선택 가능하다. CI에 사용할 브랜치를 선택한다.</p><p><img src="../../../../images/xcodeserver/make10.png" alt=""><br>프로젝트의 Scheme, Configuration 을 설정할 수 있으며 Analyze 또는 Test도 선택적으로 수행 가능하다.<br>Archive도 제공하며 ipa 까지 추출하기 위해서는 별도의 ExportOptions.plist가 필요하다.</p><p><img src="../../../../images/xcodeserver/make11.png" alt=""><br>빌드 시간과, Clean시점을 설정할 수 있어서 주기적으로 정해진 시간에 빌드를 진행, 배포할 수 있다.<br>선택 옵션은 <code>Preiodically</code>, <code>on commit</code>, <code>maually</code> 이 있어서 수동 빌드도 가능하다.</p><p><img src="../../../../images/xcodeserver/make12.png" alt=""><br><code>여기가 진정한 XCode Server의 꽃이다</code></p><p>XCode에 연결된 계정에서 사용 가능한 인증서와 프로비저닝 목록을 한번에 볼 수 있으며 빌드에 필요한 인증서와 프로비저닝을 선택하여 <code>Add to server</code> 만 선택하면 빌드서버에 자동으로 등록 설치된다.</p><ul><li>Jenkins에서 이 작업이 얼마나 번거로웠는지,,,,,</li></ul><p><img src="../../../../images/xcodeserver/make13.png" alt=""><br>빌드 과정에서 사용할 환경변수를 지정할 수 있다.</p><p><img src="../../../../images/xcodeserver/make14.png" alt=""><br>마지막 관문이다.<br>빌드를 시작할 때 Slack에 보내고 빌드가 끝나면 빌드 파일을 Slack으로 보내고! 이런 작업이 필요한데<br>바로 여기서 설정 할 수 있다.</p><p>왼쪽 하단의 <code>+</code> 버튼을 누르면 다양한 스크립트를 추가할 수 있다.</p><ul><li>빌드 시작</li><li>빌드 종료</li><li>메일 전송</li></ul><p>등 다양한 상황이 존재하며, 해당 상황에 적절한 스크립트를 통해 여러가지 기능을 확장 할 수 있다.<br><code>cocoaPod</code> 을 사용한다면 <code>Pre-Integration</code> 스크립트에 <code>Pod install</code> 을 추가해주자.</p><p><code>끝</code></p><h2 id="Bot을-만들었으면-사용해야지"><a href="#Bot을-만들었으면-사용해야지" class="headerlink" title="Bot을 만들었으면 사용해야지"></a>Bot을 만들었으면 사용해야지</h2><p>Bot을 만들었는데 어디에 있는 것일까?!</p><p><img src="../../../../images/xcodeserver/make15.png" alt=""><br><code>얍짠</code></p><p><img src="../../../../images/xcodeserver/make16.png" alt=""><br>봇의 상세화면이다. 다음의 내용을 확인 할 수 있다.</p><ul><li>테스트 성공률</li><li>Warning 수</li><li>이전 빌드보다 추가된 커밋 수</li><li>이전 빌드 이후 제거된 warning들</li><li>코드 커버리지</li><li>archive 했다면 archive file</li><li>export 했다면 ipa file</li></ul><p><code>짱이다</code></p><p>빌드를 한번 해보자. 우측 상단의 <code>Integrate</code> 버튼을 눌러보자.</p><h2 id="Jenkins-vs-XCodeServer"><a href="#Jenkins-vs-XCodeServer" class="headerlink" title="Jenkins  vs  XCodeServer"></a>Jenkins  vs  XCodeServer</h2><p>Jenkins와 XCodeServer를 사용해보면서 느낀 특징, 장단점은 다음과 같다.</p><ul><li><p>Jenkins</p><ul><li>장점<ul><li>Github과 연동이 잘된다. Hook을 통해 PR, Commit 등 다양한 상황과 연동 가능하다</li></ul></li><li>단점<ul><li>XCode8 이후로 ipa 추출하는 과정에서 ExportOptions.plist 가 추가적으로 필요하게 되었는데 아직 이를 자동으로 해주는 플러그인이 없다.</li><li>인증서, 프로비저닝 갱신 과정이 번거롭다.</li></ul></li></ul></li><li><p>XCodeServer</p><ul><li>장점<ul><li>XCode와의 연동이 최고다. 인증서, 프로비저닝 관리가 가장 깔끔하다.</li><li>빌드를 위해 별도의 웹 페이지에 접속할 필요가 없다.</li><li>OTA 기능도 지원한다 (근데 사실상 사용 불가… 애플놈들…)</li></ul></li><li>단점<ul><li>Github과의 연동이 약하다. PR을 통한 Test를 진행하는 프로젝트에서는 바로 적용이 힘들다.</li><li>아직 안정화가 될 되었다. 작은 버그들이 우수수수….</li></ul></li></ul></li></ul><p>결론적으로, <code>XCode Server</code> 를 선택해서 사용중이며 만족하면서 사용하고 있습니다~!</p><h2 id="그-외의-iOS-CI-툴"><a href="#그-외의-iOS-CI-툴" class="headerlink" title="그 외의 iOS CI 툴"></a>그 외의 iOS CI 툴</h2><p><code>fastlane</code>이라는게 있답니다..! </p>]]></content>
    
    <summary type="html">
    
      CI 란?
CI란 continuous integration의 약자로 지속적 통합을 뜻한다. 작업을 작은 단위로 쪼갠 뒤, 작은 단위로 개발, 지속적으로 통합하는 과정을 통한 개발 방법으로 코드 품질향상, 배포주기 단축을 목표로 한다.

iOS에서의 CI
iOS 앱은 실행파일(.ipa) 하나를 Export 하는데에 인증서, 프로비저닝 등 빌드 과정에 관여하는 변수가 많아 CI를 적용하기가 까다로운 편이다.

작년까지만 해도 Jenkins에 Xcode Plugin을 붙여 빌드를 진행하고 , 그 외 OTA를 위한 manifest, arc
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="XCodeServer" scheme="http://monibu1548.github.io/tags/XCodeServer/"/>
    
      <category term="XCode" scheme="http://monibu1548.github.io/tags/XCode/"/>
    
      <category term="생산성" scheme="http://monibu1548.github.io/tags/%EC%83%9D%EC%82%B0%EC%84%B1/"/>
    
  </entry>
  
  <entry>
    <title>[Objective-C] GCD를 이용한 싱글톤 객체 생성하기</title>
    <link href="http://monibu1548.github.io/2018/04/25/GCD-singleton/"/>
    <id>http://monibu1548.github.io/2018/04/25/GCD-singleton/</id>
    <published>2018-04-25T13:11:15.000Z</published>
    <updated>2018-04-25T13:28:44.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Singleton이란"><a href="#Singleton이란" class="headerlink" title="Singleton이란?"></a>Singleton이란?</h2><p>싱글톤 패턴은 하나의 프로그램(정확히는 프로세스)에 하나의 인스턴스만을 사용하기 위해 사용한다.<br>iOS 프로젝트에서는 주로 앱 전반적인 데이터를 저장하고 관리하는 매니저 객체로 많이 사용하게 된다.</p><p>C++ 또는 Java 에서도 Singleton 패턴을 많이 사용해왔는데, 보통 Singleton을 아래와 같은 방법으로 만들었을 것이다.</p><ul><li>생성자를 private 로 만든다</li><li>내부에 private static 객체를 생성한다</li><li><code>getInstance()</code> 메소드를 만들어서 단 1개의 객체를 생성, 반환하도록 한다</li></ul><p>Objective-C 에서는 명시적인 접근지정자가 없으며, thead safe하게 만들기 위해 조금 다른 방식으로 만들게 된다.</p><p>주로 <code>sharedInstance</code> 라는 클래스 메소드를 생성하며 GCD를 이용해 thread safe하게 만든다.</p><figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YNCSRManager</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YNCSRManager</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> YNCSRManager *shared = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        shared = [[YNCSRManager alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shared;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>위 코드는 <code>너의 이름은.</code> 프로젝트에서 사용한 STT(Speech-To-Text) 역할을 해주는 객체로 Singleton으로 구현했다.</p><p><code>dispatch_once</code> 는 단 1회만 실행한다는 것을 보장하며 완벽히 <code>synchronous</code> 하게 동작한다. 따라서 Thead-Safe 함을 보장받을 수 있다.</p><p><code>sharedInstance</code> 가 처음 호출되면 shared 변수에 YNCSRManager가 할당되고, 두번째 호출부터는 첫번째 호출에서 생성된 shared 변수를 그대로 return 하여 어디서든 동일한 YNCSRManager를 활용한 코딩을 할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      Singleton이란?
싱글톤 패턴은 하나의 프로그램(정확히는 프로세스)에 하나의 인스턴스만을 사용하기 위해 사용한다.
iOS 프로젝트에서는 주로 앱 전반적인 데이터를 저장하고 관리하는 매니저 객체로 많이 사용하게 된다.

C++ 또는 Java 에서도 Singleton 패턴을 많이 사용해왔는데, 보통 Singleton을 아래와 같은 방법으로 만들었을 것이다.

 * 생성자를 private 로 만든다
 * 내부에 private static 객체를 생성한다
 * getInstance() 메소드를 만들어서 단 1개의 객체를 생성, 반환하
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Objective-C" scheme="http://monibu1548.github.io/categories/iOS/Objective-C/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="GCD" scheme="http://monibu1548.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>[Swift] 열거형 Enum 사용하기</title>
    <link href="http://monibu1548.github.io/2018/04/18/swift-enum/"/>
    <id>http://monibu1548.github.io/2018/04/18/swift-enum/</id>
    <published>2018-04-18T13:23:58.000Z</published>
    <updated>2018-04-25T13:27:45.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스위프트의-Enum-기본"><a href="#스위프트의-Enum-기본" class="headerlink" title="스위프트의 Enum 기본"></a>스위프트의 Enum 기본</h2><p>enum의 선언은 <code>enum</code> 키워드로 합니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Languaegs</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Korean</span> = <span class="string">"KR"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Japanese</span> = <span class="string">"JP"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 예시 하나로도 Obj-C의 Enum과의 많은 차이점을 느낄 수 있습니다.</p><p>Enum에 String을 넣을 수 있다니!!<br>Obj-C 에서 Enum을 NSString에 매핑하기 위해 얼마나 많은 노오오력이 필요했던가!</p><h3 id="사용-예시-1-서버에서-String으로-내려준-“KR”를-num에-매핑하기"><a href="#사용-예시-1-서버에서-String으로-내려준-“KR”를-num에-매핑하기" class="headerlink" title="사용 예시 1) 서버에서 String으로 내려준 “KR”를 num에 매핑하기"></a>사용 예시 1) 서버에서 String으로 내려준 “KR”를 num에 매핑하기</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> language = <span class="type">Languages</span>.<span class="keyword">init</span>(rawValue: <span class="string">"KR"</span>)</span><br></pre></td></tr></table></figure><p>끝. 참 쉽죠?</p><h3 id="사용-예시-Swift-enum을-서버에-전달하기-위해-Serialize를-하기"><a href="#사용-예시-Swift-enum을-서버에-전달하기-위해-Serialize를-하기" class="headerlink" title="사용 예시 )Swift enum을 서버에 전달하기 위해 Serialize를 하기"></a>사용 예시 )Swift enum을 서버에 전달하기 위해 Serialize를 하기</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> language = <span class="type">Languages</span>.<span class="type">Korean</span></span><br><span class="line">language.rawValue  <span class="comment">//  "KR"</span></span><br></pre></td></tr></table></figure><h2 id="Switch-에서의-Enum"><a href="#Switch-에서의-Enum" class="headerlink" title="Switch 에서의 Enum"></a>Switch 에서의 Enum</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> language = <span class="type">Languages</span>.<span class="type">Korean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> language &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Korean</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"안녕하세요"</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">Japanese</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">"こんにちは。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과는 <code>안녕하세요</code></p><p><code>Switch</code> 또는 <code>if</code> 문에서 enum을 사용할 때 <code>.Korean</code> 처럼 enum 타입명을 앞에 붙이지 않아도 됩니다. 열거형의 이름은 스위프트의 타입 검사기가 자동으로 알아낼 수 있기 때문에 생략할 수 있습니다.</p><p>타입 이름이 긴 enum 의 경우에 유용합니다.</p><h2 id="nested-enum"><a href="#nested-enum" class="headerlink" title="nested enum"></a>nested enum</h2><p>enum 의 값으로 enum도 사용 가능합니다.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Windows</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Linux</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">MadeBy</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Apple</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Samsung</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">LG</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">PowerButton</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Monitor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Computer.OS.Windows<br>Computer.MakeBy.LG<br>Computer.PowerButton</p><p>위와 같은 예시로 사용 가능합니다.</p><h2 id="enum의-메소드"><a href="#enum의-메소드" class="headerlink" title="enum의 메소드"></a>enum의 메소드</h2><p>기타 다른 언어와 마찬가지로 Swift 에서도 enum 에 개별 메소드 구현이 가능합니다.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Languaegs</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Korean</span> = <span class="string">"KR"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Japanese</span> = <span class="string">"JP"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span>:</span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Korean</span> <span class="keyword">return</span> <span class="string">"안녕하세요"</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Japanese</span> <span class="keyword">return</span> <span class="string">"こんにちは。"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> language.<span class="type">Korean</span>.hello()</span><br></pre></td></tr></table></figure><p>languages.Korean.hello() 의 결과는 “안녕하세요” 입니다.<br>메소드 내부에서는 switch 문에서 self 를 통해 적절한 분기처리를 해야합니다.</p><h3 id="정적-메소드"><a href="#정적-메소드" class="headerlink" title="정적 메소드"></a>정적 메소드</h3><p>enum 의 인스턴스 메소드 외에도 정적 메소드 구현이 가능합니다.<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Languages</span> : <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Korean</span> = <span class="string">"KR"</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Japanese</span> = <span class="string">"JP"</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span>:</span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Korean</span> <span class="keyword">return</span> <span class="string">"안녕하세요"</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Japanese</span> <span class="keyword">return</span> <span class="string">"こんにちは。"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">fromType</span><span class="params">(type : String)</span></span> -&gt; <span class="type">Languages</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> type == <span class="string">"KR"</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> .<span class="type">Korean</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> .<span class="type">Japanese</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Languages</span>.fromType(<span class="string">"KR"</span>)</span><br></pre></td></tr></table></figure></p><p>처럼 사용 가능하며 주로 enum을 생성할 때 rawValue로 정의되지 않은 값이 들어왔을 때 예외 처리를 위해 사용한다.</p>]]></content>
    
    <summary type="html">
    
      스위프트의 Enum 기본
enum의 선언은 enum 키워드로 합니다.

1
2
3
4


enum Languaegs : String {
    case Korean = &quot;KR&quot;
    case Japanese = &quot;JP&quot;
}


위 예시 하나로도 Obj-C의 Enum과의 많은 차이점을 느낄 수 있습니다.

Enum에 String을 넣을 수 있다니!!
Obj-C 에서 Enum을 NSString에 매핑하기 위해 얼마나 많은 노오오력이 필요했던가!

사용 예시 1) 서버에서 String으로 내려준 “KR”를 num에 매핑하기
1


le
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/categories/iOS/Swift/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://monibu1548.github.io/tags/Swift/"/>
    
      <category term="스위프트" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%EC%9C%84%ED%94%84%ED%8A%B8/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 똑똑하게 사용하기 (명령어, 사용 예시 소개)</title>
    <link href="http://monibu1548.github.io/2018/04/16/cocoapods-prompt/"/>
    <id>http://monibu1548.github.io/2018/04/16/cocoapods-prompt/</id>
    <published>2018-04-16T14:57:44.000Z</published>
    <updated>2018-05-05T19:09:28.705Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pod-install"><a href="#Pod-install" class="headerlink" title="Pod install"></a>Pod install</h2><p>iOS 프로젝트에서 CocoaPods을 사용하지 않은 프로젝트를 보기 힘들정도로 대부분의 iOS 프로젝트가 CocoaPods를 사용한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">프로젝트 다운받고 -&gt; `Pod install` -&gt; 앱 실행</span><br></pre></td></tr></table></figure><p>너무나도 익숙한 Flow지만 막상 다른 명령어는 뭐가 있는지, <code>Pod install</code>과 <code>Pod update</code>의 차이를 정확하게 이해하고 사용하고 있지 않다.</p><p>이번 기회에 <code>CocoaPods</code> 을 정확히 이해하고 사용해보자.</p><h2 id="CocoaPods-명령어"><a href="#CocoaPods-명령어" class="headerlink" title="CocoaPods 명령어"></a>CocoaPods 명령어</h2><h3 id="Pod-install-1"><a href="#Pod-install-1" class="headerlink" title="Pod install"></a>Pod install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>가장 많이 사용하는 명령어.<br>새로운 <code>pod</code> 을 다운로드, 설치하기 위해 사용한다.</p><p>다운로드 받을 <code>pod</code>을 결정하는 것은 <code>Podfile.lock</code> 또는 <code>Podfile</code> 이다.</p><ol><li>Podfile.lock 파일이 있다면, .lock 파일 내에 명시된 pod과 그 버전을 다운받는다.</li><li>Podfile.lock 파일이 없다면, <code>Podfile</code> 에서 pod과 <code>~&gt;</code> 으로 명시된 버전을 다운받고 Podfile.lock에 버전을 명시한다</li></ol><h3 id="Podfile-에서-gt-는-무엇을-의미할까"><a href="#Podfile-에서-gt-는-무엇을-의미할까" class="headerlink" title="Podfile 에서 ~&gt; 는 무엇을 의미할까?"></a>Podfile 에서 <code>~&gt;</code> 는 무엇을 의미할까?</h3><p><code>~&gt;</code> 기호는 버전의 상한선(이보다 높을 수 없음) 을 의미한다. 버전은 <code>메이저.마이너.패치</code>로 구분한다.</p><ul><li><code>~&gt; 0.1.2</code> 버전 0.1.2 ~ 0.2 (0.2 이상 포함되지 않음)</li><li><code>~&gt; 0.1&#39;</code> 버전 0.1 (1.0 이상 포함하지 않음)</li></ul><p><code>-&gt;</code> 말고도 다른 연산자도 있다</p><ul><li><code>&gt; 0.1</code> 0.1보다 큰 모든 버전</li><li><code>&gt;= 0.1</code> 버전 0.1 이상</li><li><code>&lt; 0.1</code> 0.1보다 낮은 모든 버전</li><li><code>&lt;= 0.1</code> 버전 0.1 및 그 이하 버전</li></ul><p><code>Podfile</code> 에 명시된 <code>pod</code>를 다운받고 <code>Podfile.lock</code> 에 다운받은 버전을 명시한다.</p><p><em>Podfile.lock 은 왜 필요할까?</em><br><code>Podfile.lock</code>에 설치된 pod의 버전을 명시함으로써, pod이 업데이트 되면서 기존 앱이 동작되지 않는 문제를 해결하기 위해 <code>Podfile.lock</code> 에 기존 pod의 버전을 lock함으로써, 다른사람이 프로젝트를 clone 받아 <code>pod install</code> 했을때 유효한 pod 버전을 다운받기 위함이다! 버전픽스!</p><h3 id="Pod-Update"><a href="#Pod-Update" class="headerlink" title="Pod Update"></a>Pod Update</h3><p><code>Podfile.lock</code> 파일이 있는 한, <code>Pod install</code> 명령어를 사용하면 .lock 파일에 명시된 pod 버전에서 벗어날 수 없다. 시간이 흘러 pod 이 업데이트 되고, 업데이트 된 기능을 내 프로젝트에 적용해야 할 때, 내 프로젝트가 갖고있는 pod 을 업데이트 할 때 <code>Pod update</code> 를 사용한다.</p><h4 id="Pod-update-팟-이름-을-실행하면"><a href="#Pod-update-팟-이름-을-실행하면" class="headerlink" title="Pod update {팟 이름} 을 실행하면"></a>Pod update {팟 이름} 을 실행하면</h4><ol><li>Podfile.lock에 있는 버전은 무시하고 CocoaPods 원격 레포지토리에 있는 Pod 의 최신 버전을 다운받는다. <code>단! Podfile 에서 ~&gt;, &gt;= 등으로 제한을 걸어두었다면, 이 버전 제한 내의 최신버전이 적용될 것이다</code></li><li>Podfile.lock에 새로운 pod 버전을 명시한다</li></ol><h4 id="Pod-update을-실행하면"><a href="#Pod-update을-실행하면" class="headerlink" title="Pod update을 실행하면"></a>Pod update을 실행하면</h4><p>Podfile 에 있는 모든 Pod들을 대상으로 update 과정을 거친다</p><h3 id="Podfile-lock-의-버전관리-git-commit에-포함해야-하나"><a href="#Podfile-lock-의-버전관리-git-commit에-포함해야-하나" class="headerlink" title="Podfile.lock 의 버전관리 (git commit에 포함해야 하나?)"></a>Podfile.lock 의 버전관리 (git commit에 포함해야 하나?)</h3><p><code>해야한다</code></p><p>뭔가 확장자가 .gitignore에 포함되어야 할 느낌이지만! Podfile.lock은 Pod 파일들의 버전을 픽스시켜주는 역할을 한다.<br>다른사람에게 프로젝트를 공유할 때, 동일한 라이브러리 환경을 제공하기 위해 필수로 필요하며, 따라서 Git 으로 함께 버전관리를 해야한다.</p>]]></content>
    
    <summary type="html">
    
      Pod install
iOS 프로젝트에서 CocoaPods을 사용하지 않은 프로젝트를 보기 힘들정도로 대부분의 iOS 프로젝트가 CocoaPods를 사용한다.

1


프로젝트 다운받고 -&gt; `Pod install` -&gt; 앱 실행


너무나도 익숙한 Flow지만 막상 다른 명령어는 뭐가 있는지, Pod install과 Pod update의 차이를 정확하게 이해하고 사용하고 있지 않다.

이번 기회에 CocoaPods 을 정확히 이해하고 사용해보자.

CocoaPods 명령어
Pod install
1


pod install


가장
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://monibu1548.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS 프로젝트에 cocoapods 적용하기</title>
    <link href="http://monibu1548.github.io/2018/04/16/cocoapods/"/>
    <id>http://monibu1548.github.io/2018/04/16/cocoapods/</id>
    <published>2018-04-16T13:46:03.000Z</published>
    <updated>2018-05-05T19:08:54.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Cocoapods"><a href="#Cocoapods" class="headerlink" title="Cocoapods?"></a>Cocoapods?</h2><p>iOS 앱을 개발하면서 외부 라이브러리의 필요성을 느끼게 되고, 여러 라이브러리를 사용하다보면 서로 의존성이 꼬이는 문제가 발생할 수 있다.이런 문제를 해결하기 위해 자바에서는 Maven이나 Gradle등의 의존성 관리 툴을 사용한다.<br>iOS 생태계에도 감사하게 <code>CocoaPods</code>이라는 의존성 관리 툴이 있다.</p><p><code>CocoaPods</code> 외에도 <code>Carthage</code> 라는 툴이 있지만, 사용해본 적 없고 사용중인 프로젝트를 본적이 아직 없다.</p><h2 id="Cocoapods-설치"><a href="#Cocoapods-설치" class="headerlink" title="Cocoapods 설치"></a>Cocoapods 설치</h2><p>맥 사용자라면 일단 <code>HomeBrew</code>는 설치되어 있겠지!<br>아직 <code>HomeBrew</code>를 설치하지 않았다면?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><p>터미널에 위 명령어를 입력하면 끝!</p><h2 id="XCode-프로젝트에-적용하기"><a href="#XCode-프로젝트에-적용하기" class="headerlink" title="XCode 프로젝트에 적용하기"></a>XCode 프로젝트에 적용하기</h2><h3 id="XCode-프로젝트-위치로-이동"><a href="#XCode-프로젝트-위치로-이동" class="headerlink" title="XCode 프로젝트 위치로 이동"></a>XCode 프로젝트 위치로 이동</h3><p>터미널에서 XCode 프로젝트 위치로 이동한다<br><img src="../../../../images/cocoapods/make1.png" alt=""></p><h3 id="Podfile-생성"><a href="#Podfile-생성" class="headerlink" title="Podfile 생성"></a>Podfile 생성</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod init</span><br></pre></td></tr></table></figure><p><code>pod init</code> 명령어를 통해 Podfile 을 생성한다.<br><img src="../../../../images/cocoapods/make2.png" alt=""></p><p>이 Podfile은 이렇게 생겼다.</p><p><img src="../../../../images/cocoapods/make3.png" alt=""></p><p>이제 사용할 pods 들을 넣는다. 네트워크를 위한 <code>AFNetworking</code>은 거의 필수고,<br>이번 프로젝트에는 RXSwift를 공부 해보고 싶어서 Podsfile 에 RXSwift를 넣었다.<br><img src="../../../../images/cocoapods/make4.png" alt=""></p><p>이렇게 만들고 저장!!</p><h3 id="Pods-설치"><a href="#Pods-설치" class="headerlink" title="Pods 설치"></a>Pods 설치</h3><p>Podfile이 완성되었으면 아래 명령어로 <code>Pods</code> 들을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>Pods 가 설치된다.<br><img src="../../../../images/cocoapods/make5.png" alt=""></p><p>Pods가 모두 설치되고 나면 <code>Podfile.lock</code>, <code>Pods</code>, <code>{프로젝트명}.xcworkspace</code> 3개의 파일 또는 디렉토리가 생성된다.<br><img src="../../../../images/cocoapods/make6.png" alt=""></p><ul><li>Podfile.lock : Pods 의 버전픽스를 위한 파일</li><li>Pods : 라이브러리들이 다운로드 되는 디렉토리</li><li>{프로젝트명}.xcworkspace : Pods를 사용할 수 있도록 포함된 워크스페이스 =&gt; 앞으로 이걸로 프로젝트를 열어야 한다</li></ul><h3 id="프로젝트명-xcworkspace-실행"><a href="#프로젝트명-xcworkspace-실행" class="headerlink" title="{프로젝트명}.xcworkspace 실행"></a>{프로젝트명}.xcworkspace 실행</h3><p><img src="../../../../images/cocoapods/make7.png" alt=""></p><p><code>Pod install</code> 을 통해 생성된 워크스페이스를 실행한다.<br>왼쪽의 메뉴바를 보면 <code>Pods</code> 프로젝트와, 그 내부에 Pod 들이 설치된 것을 볼 수 있다.</p><p><img src="../../../../images/cocoapods/make8.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      Cocoapods?
iOS 앱을 개발하면서 외부 라이브러리의 필요성을 느끼게 되고, 여러 라이브러리를 사용하다보면 서로 의존성이 꼬이는 문제가 발생할 수 있다.이런 문제를 해결하기 위해 자바에서는 Maven이나 Gradle등의 의존성 관리 툴을 사용한다.
iOS 생태계에도 감사하게 CocoaPods이라는 의존성 관리 툴이 있다.

CocoaPods 외에도 Carthage 라는 툴이 있지만, 사용해본 적 없고 사용중인 프로젝트를 본적이 아직 없다.

Cocoapods 설치
맥 사용자라면 일단 HomeBrew는 설치되어 있겠지!
아직 
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="CocoaPods" scheme="http://monibu1548.github.io/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>iOS Application 개발 시작하기 - 2 (프로비저닝 생성, XCode 프로젝트 설정)</title>
    <link href="http://monibu1548.github.io/2018/04/15/apple-development-2/"/>
    <id>http://monibu1548.github.io/2018/04/15/apple-development-2/</id>
    <published>2018-04-15T13:50:59.000Z</published>
    <updated>2018-05-05T19:09:27.385Z</updated>
    
    <content type="html"><![CDATA[<p>지난 포스팅 <a href="http://monibu1548.github.io/2018/04/15/apple-development/">iOS Application 개발 시작하기 - 1 (개발자 등록, 인증서 등록)</a> 에서는 애플 개발자 계정을 만들고 인증서를 등록했다.</p><p>이제 앱을 디바이스에서 실행시키기 위해 Provisioning Profile 을 생성하고, Xcode 프로젝트를 생성하는 과정을 다룬다.</p><h2 id="App-ID-등록"><a href="#App-ID-등록" class="headerlink" title="App ID 등록"></a>App ID 등록</h2><p>앱을 생성하기 위해서 먼저 Apple Developer에서 어떤 앱을 만들건지 App ID를 생성해야 한다.<br><img src="../../../../images/appledevelopment/make3.png" alt=""></p><ul><li>App Name : 앱 이름 ex) YourName</li><li>Bundle Id : 앱의 번들 아이디 ex) io.github.monibu1548.YourName</li></ul><p>아래 체크박스는 어떤 추가 기능이 필요한지 선택할 수 있다. 일단 패스하고 필요한 기능이 있다면 나중에 추가가 가능하다.</p><h2 id="Provisioning-Profile-생성"><a href="#Provisioning-Profile-생성" class="headerlink" title="Provisioning Profile 생성"></a>Provisioning Profile 생성</h2><p>Provisioning Profile 이란, 앱이 디바이스에서 실행 될 수 있는지 정보를 갖고 있는 파일이며 <code>.mobileprovision</code> 확장자를 갖는다.</p><p>Provisiong Profile은 다음과 같은 정보를 갖고 있다. (Development)</p><ul><li>app bundle ID</li><li>device UUID 정보</li><li>certificate 정보</li></ul><h3 id="참고-앱이-디바이스에-정상적으로-설치되기-위해-거치는-검증-과정"><a href="#참고-앱이-디바이스에-정상적으로-설치되기-위해-거치는-검증-과정" class="headerlink" title="참고. 앱이 디바이스에 정상적으로 설치되기 위해 거치는 검증 과정"></a>참고. 앱이 디바이스에 정상적으로 설치되기 위해 거치는 검증 과정</h3><ul><li>Provisioning Profile에서 인증서 정보를 추출, 앱을 실행하려는 디바이스에서 인증서가 유효한지 확인</li><li>Provisioning Profile에서 device UUID 정보를 추출, 앱을 실행하려는 디바이스의 UUID와 일치한지 확인</li><li>CodeResources 디렉토리에서각 파일의 해시값을 실제의 파일들과 확인하여 빌드 후 수정이 되지 않았음을 확인</li></ul><p>Provisioning Profile은 인증서와 마찬가지로 <a href="https://developer.apple.com/kr/support/development/" target="_blank" rel="noopener">애플 개발자센터</a>에서 생성한다.</p><p><img src="../../../../images/appledevelopment/make1.png" alt=""><br><code>Certificates, Identifiers &amp; Profiles</code> 메뉴에서 아래 버튼 클릭한다.</p><p><img src="../../../../images/appledevelopment/make2.png" alt=""><br>인증서 생성때와 마찬가지로 <code>Development</code>와 <code>Production</code>으로 구분되며 같은 구분의 인증서와 연결된다.</p><p>다음페이지에서는 <code>App ID</code> 에서 생성한 ID를 선택한다.<br><img src="../../../../images/appledevelopment/make4.png" alt=""></p><p>전 포스트에서 만들었던 인증서를 선택한다.<br><img src="../../../../images/appledevelopment/make5.png" alt=""></p><p>앱을 테스트 할 디바이스를 선택한다.<br><img src="../../../../images/appledevelopment/make6.png" alt=""></p><ul><li>디바이스 등록은 개발자 센터 좌측 <code>Devices</code> 에서 어렵지 않게 가능하다!</li></ul><p>짜잔. Provisioning Profile이 생성되었다.<br><img src="../../../../images/appledevelopment/make6.png" alt=""></p><p>다운로드 받고, 더블클릭해서 실행하자. 그러면 XCode디렉토리에 자동 등록된다.</p><h2 id="XCode-프로젝트-생성"><a href="#XCode-프로젝트-생성" class="headerlink" title="XCode 프로젝트 생성"></a>XCode 프로젝트 생성</h2><p>XCode 실행 -&gt; 메뉴 <code>File</code> -&gt; <code>New</code> -&gt; <code>Project</code><br>Single View App 선택<br><img src="../../../../images/appledevelopment/make8.png" alt=""></p><p>App ID를 만들때 입력했던 Bundle ID 입력, App Name 입력해서 프로젝트 생성 후<br>프로젝트 파일을 열어보면 다음과 같다.</p><p>이제 <code>Signing</code> 영역에서 Debug(Development), Release(AppStore) 프로비저닝을 선택하여 마무리한다.<br><img src="../../../../images/appledevelopment/make9.png" alt=""></p><p>이제부터 코딩 시작!</p>]]></content>
    
    <summary type="html">
    
      지난 포스팅 iOS Application 개발 시작하기 - 1 (개발자 등록, 인증서 등록) 에서는 애플 개발자 계정을 만들고 인증서를 등록했다.

이제 앱을 디바이스에서 실행시키기 위해 Provisioning Profile 을 생성하고, Xcode 프로젝트를 생성하는 과정을 다룬다.

App ID 등록
앱을 생성하기 위해서 먼저 Apple Developer에서 어떤 앱을 만들건지 App ID를 생성해야 한다.


 * App Name : 앱 이름 ex) YourName
 * Bundle Id : 앱의 번들 아이디 ex) io.gi
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://monibu1548.github.io/tags/Apple/"/>
    
      <category term="Xcode" scheme="http://monibu1548.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>iOS Application 개발 시작하기 - 1 (개발자 등록, 인증서 등록)</title>
    <link href="http://monibu1548.github.io/2018/04/15/apple-development/"/>
    <id>http://monibu1548.github.io/2018/04/15/apple-development/</id>
    <published>2018-04-15T10:59:43.000Z</published>
    <updated>2018-05-05T19:09:34.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apple-개발자-계정"><a href="#Apple-개발자-계정" class="headerlink" title="Apple 개발자 계정"></a>Apple 개발자 계정</h1><p>iOS앱을 개발하고 AppStore에 등록, 판매하기 위해서 Apple에 개발자 계정을 등록해야 한다. 애플 개발자 계정은 1년에 약 한화로 10만원 정도 된다. Google에 비하면 정말 비싼가격이지만…! iOS 개발자가 개발자 계정 없이 먹고 살 수 없으니 등록하자!</p><p>준비물은 약 10만원 정도가 든 카드와, Apple 계정이다</p><h2 id="애플-개발자-사이트-접속"><a href="#애플-개발자-사이트-접속" class="headerlink" title="애플 개발자 사이트 접속"></a>애플 개발자 사이트 접속</h2><p><a href="https://developer.apple.com/kr/support/development/" target="_blank" rel="noopener">https://developer.apple.com/kr/support/development/</a></p><p>우측 상단의 <code>Account</code> 메뉴를 통해 로그인을 하면 개발자 콘솔로 진입한다.</p><p><img src="../../../../images/appledevelopment/1.png" alt=""></p><ul><li>3년전 다른 프로젝트에서 iOS 개발자 등록을 하면서 renew로 뜨는 상태</li></ul><h2 id="새로-등록-또는-재등록-결국은-결제"><a href="#새로-등록-또는-재등록-결국은-결제" class="headerlink" title="새로 등록, 또는 재등록. 결국은 결제"></a>새로 등록, 또는 재등록. 결국은 결제</h2><p><img src="../../../../images/appledevelopment/pay.png" alt=""><br>2015년 첫 등록시에도 129,000 원이었나요.. 역시 개발자 계정 등록은 회사돈으로 ㅠㅜ</p><p>결제를 마치면 감사합니다! 문구와 함께 등록이 끝나고 iOS개발을 위한 첫번째 과정이 끝난다</p><p><img src="../../../../images/appledevelopment/payend.png" alt=""></p><h1 id="개발자-인증서-등록"><a href="#개발자-인증서-등록" class="headerlink" title="개발자 인증서 등록"></a>개발자 인증서 등록</h1><p>이제 개인 인증서를 앱에 서명을 하기위해 Apple에 등록을 해야한다.</p><p><a href="https://developer.apple.com/" target="_blank" rel="noopener">https://developer.apple.com/</a> 왼쪽 메뉴 <code>Certificates</code> 에서 등록 가능 합니다.</p><ul><li>직접 인증서를 수동으로 등록하지 않아도, XCode에서 Auto Managing 옵션을 사용할 경우 자동으로 Certificate와 Provisioning profile이 생성되어 등록됩니다. 개인 혼자 앱을 개발하는 경우 AutoManaging을 사용해도 문제가 없으나, 하나의 인증서로 여러명이 개발하는 경우 Auto managing을 사용시 타인이 Revoke 시킬 수 있는 등, AutoManaging보다는 명시적으로 직접 등록하여 사용하는 것이 좋습니다.</li></ul><h2 id="Mac-에서-인증서-생성"><a href="#Mac-에서-인증서-생성" class="headerlink" title="Mac 에서 인증서 생성"></a>Mac 에서 인증서 생성</h2><p><code>키체인 접근</code> 프로그램을 실행한다.<br>메뉴 <code>키체인 접근</code> -&gt; <code>인증서 지원</code> -&gt; <code>인증 기관에서 인증서 요청...</code>에 진입하여 내용을 작성한다.</p><p><img src="../../../../images/appledevelopment/makecert.png" alt=""></p><p>요청항목에서는 <code>디스크에 저장됨</code>을 선택해주세요<br>디스크에 <code>CertificateSigningRequest.certSigningRequest</code> 파일을 저장해둡니다! 잘 보관해주세요</p><h2 id="Apple-Developer에-인증서-등록"><a href="#Apple-Developer에-인증서-등록" class="headerlink" title="Apple Developer에 인증서 등록"></a>Apple Developer에 인증서 등록</h2><ul><li>애플 개발자 페이지에서 + 버튼을 통해 위 과정에서 만든 인증서를 등록한다<br><a href="https://developer.apple.com/account/ios/certificate/create" target="_blank" rel="noopener">https://developer.apple.com/account/ios/certificate/create</a></li></ul><p>여러가지 옵션을 볼 수 있는데,</p><ul><li>iOS App Development : 개발용 인증서</li><li><p>Apple Push Notification service SSL : 개발용 푸시 테스트 인증서</p></li><li><p>App Store and Ad Hoc : 앱스토어 or 인하우스 배포용 인증서</p></li><li>Apple Push Notification service SSL : 앱스토어 or 인하우스 배포용 인증서</li></ul><p>크게 Development와 Production 으로 구분된다.</p><p>iOS를 개발하기 위해 Development 인증서를 사용하고 개발이 완료되고 AppStore에 등록하기 위해 App Store 인증서를 사용한다고 보면 된다.</p><p>지금은 개발을 위한 인증서가 먼저 필요하므로 <code>iOS App Development</code>를 선택한다.</p><p>그 다음. Continue, Continue 를 눌러 다음단계로 진행한다.</p><p><img src="../../../../images/appledevelopment/selectCert.png" alt=""></p><p>Choose File.. 을 눌러 위 과정에서 만든 <code>CertificateSigningRequest.certSigningRequest</code>을 선택한다.</p><p>그러면 다음페이지에서 cer 파일을 되돌려 받게 된다. 이걸 다운로드 받아서 실행! 키체인에 등록한다.</p><p><img src="../../../../images/appledevelopment/finish.png" alt=""></p><p>여기까지가 iOS 앱 개발 시작을 위한 사전 준비과정이 끝났다!</p><ul><li>디바이스에서 앱 실행을 위한 프로비저닝 생성은 다음시간에 포스팅!</li></ul>]]></content>
    
    <summary type="html">
    
      Apple 개발자 계정
iOS앱을 개발하고 AppStore에 등록, 판매하기 위해서 Apple에 개발자 계정을 등록해야 한다. 애플 개발자 계정은 1년에 약 한화로 10만원 정도 된다. Google에 비하면 정말 비싼가격이지만…! iOS 개발자가 개발자 계정 없이 먹고 살 수 없으니 등록하자!

준비물은 약 10만원 정도가 든 카드와, Apple 계정이다

애플 개발자 사이트 접속
https://developer.apple.com/kr/support/development/

우측 상단의 Account 메뉴를 통해 로그인을 하면 개발
    
    </summary>
    
      <category term="iOS" scheme="http://monibu1548.github.io/categories/iOS/"/>
    
      <category term="Etc" scheme="http://monibu1548.github.io/categories/iOS/Etc/"/>
    
    
      <category term="iOS" scheme="http://monibu1548.github.io/tags/iOS/"/>
    
      <category term="Apple" scheme="http://monibu1548.github.io/tags/Apple/"/>
    
      <category term="Xcode" scheme="http://monibu1548.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>NHNent가 만든 협업 서비스 Dooray</title>
    <link href="http://monibu1548.github.io/2018/03/29/dooray/"/>
    <id>http://monibu1548.github.io/2018/03/29/dooray/</id>
    <published>2018-03-29T06:12:58.000Z</published>
    <updated>2018-04-15T06:14:17.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JIRA-vs-Line-Works-vs-Dooray-직접-사용해본-후기"><a href="#JIRA-vs-Line-Works-vs-Dooray-직접-사용해본-후기" class="headerlink" title="JIRA vs Line Works vs Dooray 직접 사용해본 후기"></a>JIRA vs Line Works vs Dooray 직접 사용해본 후기</h1><p>JIRA : 강력한 스프린트 관리 기능! But, 위키가 쌓이면 쌓일수록 최신화 안되는 문서들이 가득, 문서찾기도 힘듦ㅠㅜ</p><p>Line Works : 네이버 메일, 드라이브, 캘린더를 그대로 가져와서 익숙하다!</p><p>Dooray : 처음에 배우기 어렵다…. 하지만 익숙해지면 이만한게 없다!! 빠른 문서찾기, 태그! 메신저, 메일, 프로젝트, 드라이브 안되는게 없다!</p><h1 id="Dooray의-강력한-기능들"><a href="#Dooray의-강력한-기능들" class="headerlink" title="Dooray의 강력한 기능들!"></a>Dooray의 강력한 기능들!</h1><h2 id="HOOK을-통해서-자동으로-업무-등록-댓글등록이-가능해요"><a href="#HOOK을-통해서-자동으로-업무-등록-댓글등록이-가능해요" class="headerlink" title="HOOK을 통해서 자동으로 업무 등록, 댓글등록이 가능해요"></a>HOOK을 통해서 자동으로 업무 등록, 댓글등록이 가능해요</h2><ul><li>빌드를 하거나 이슈가 발생했을때 바로바로 업무등록 및 수정 알림!<br><img src="../../../../images/dooray/1.png" alt=""></li></ul><h2 id="우선순위-태그-완료일-마일스톤-지정까지-상세하게"><a href="#우선순위-태그-완료일-마일스톤-지정까지-상세하게" class="headerlink" title="우선순위, 태그, 완료일, 마일스톤 지정까지 상세하게!"></a>우선순위, 태그, 완료일, 마일스톤 지정까지 상세하게!</h2><ul><li>업무의 우선순위 확인이나 나중에 검색할 때 엄청 편해요<br><img src="../../../../images/dooray/2.png" alt=""></li></ul><h2 id="메신저도-엄청나다"><a href="#메신저도-엄청나다" class="headerlink" title="메신저도 엄청나다"></a>메신저도 엄청나다</h2><ul><li>현재 자리에 있는지, 자리비움인지 한눈에 볼 수 있어요<br><img src="../../../../images/dooray/3.png" alt=""></li></ul><h2 id="업무에-최적인-메일"><a href="#업무에-최적인-메일" class="headerlink" title="업무에 최적인 메일"></a>업무에 최적인 메일</h2><ul><li>자동 분류 기능으로 쉽게 분류하고 찾아볼 수 있어요</li></ul><h2 id="그-외…"><a href="#그-외…" class="headerlink" title="그 외…"></a>그 외…</h2><p>말로 표현할 수 없는 정말 유용하고 다양한 기능들</p><ul><li>마크다운으로 글을 이쁘게 쓰면 PPT 발표모드로도 사용할 수 있어요</li><li>UML도 그릴 수 있죠</li><li>다른 업무 자체를 태그할 수도 있어요</li><li>담당자에게 일을 빨리 빨리 넘길 수 있죠</li></ul><p>NHN entertainment의 Dooray! 많이 사용해주세요 :)</p>]]></content>
    
    <summary type="html">
    
      JIRA vs Line Works vs Dooray 직접 사용해본 후기
JIRA : 강력한 스프린트 관리 기능! But, 위키가 쌓이면 쌓일수록 최신화 안되는 문서들이 가득, 문서찾기도 힘듦ㅠㅜ

Line Works : 네이버 메일, 드라이브, 캘린더를 그대로 가져와서 익숙하다!

Dooray : 처음에 배우기 어렵다…. 하지만 익숙해지면 이만한게 없다!! 빠른 문서찾기, 태그! 메신저, 메일, 프로젝트, 드라이브 안되는게 없다!

Dooray의 강력한 기능들!
HOOK을 통해서 자동으로 업무 등록, 댓글등록이 가능해요
 * 빌드를
    
    </summary>
    
      <category term="NHN ent." scheme="http://monibu1548.github.io/categories/NHN-ent/"/>
    
    
      <category term="NHN" scheme="http://monibu1548.github.io/tags/NHN/"/>
    
      <category term="Dooray" scheme="http://monibu1548.github.io/tags/Dooray/"/>
    
  </entry>
  
  <entry>
    <title>웹 js, css 정적 파일 버전관리 방법</title>
    <link href="http://monibu1548.github.io/2017/03/10/web-optimize-3/"/>
    <id>http://monibu1548.github.io/2017/03/10/web-optimize-3/</id>
    <published>2017-03-10T05:57:20.000Z</published>
    <updated>2018-04-15T06:00:07.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js-css-정적-파일-버전-관리"><a href="#js-css-정적-파일-버전-관리" class="headerlink" title="js, css 정적 파일 버전 관리"></a>js, css 정적 파일 버전 관리</h1><p>WAS가 1개일때는 문제가 없지만 2개, 3개 … N개가 되면 새로운 문제가 발생한다.</p><p>크게 2가지 문제로 구분할 수 있다.</p><ol><li><p>최신 Back-End와 구 Front-End 의 만남</p></li><li><p>브라우저 캐싱 &lt;- 사실 WAS가 1개일때도 문제</p></li></ol><h2 id="두가지-문제점은-어떤-이슈를-발생시키나"><a href="#두가지-문제점은-어떤-이슈를-발생시키나" class="headerlink" title="두가지 문제점은 어떤 이슈를 발생시키나??"></a>두가지 문제점은 어떤 이슈를 발생시키나??</h2><p>깨진다. 웹페이지가 깨진다. 바스락. 와장창. js 또는 css를 제대로 가져오지 못하기 때문.</p><h2 id="원인은"><a href="#원인은" class="headerlink" title="원인은?"></a>원인은?</h2><p>L4로 묶여있는 웹 서버 집단에서 의도적으로 점진적 배포 혹은 일반 배포 단계에서 각 서버의 버전이 불일치 하는 현상이 생긴다. 이 시점에서 HTML과 js, css 요청 서버가 달라지면 서로 호환되지 않아 깨짐현상이 발생한다.</p><h2 id="해결방법은"><a href="#해결방법은" class="headerlink" title="해결방법은?"></a>해결방법은?</h2><h3 id="최신-Back-End와-구-Front-End-의-만남-gt-정적-파일-버전-관리"><a href="#최신-Back-End와-구-Front-End-의-만남-gt-정적-파일-버전-관리" class="headerlink" title="최신 Back-End와 구 Front-End 의 만남  =&gt;  정적 파일 버전 관리"></a>최신 Back-End와 구 Front-End 의 만남  =&gt;  정적 파일 버전 관리</h3><p>정적 파일 선배포 및 버전관리 후 Back-End 배포하여 배포 당시 시점의 css, js를 정확히 호출하게 한다.</p><h4 id="Spring에서의-설정"><a href="#Spring에서의-설정" class="headerlink" title="Spring에서의 설정"></a>Spring에서의 설정</h4><p>Spring 프로젝트에 현재 정적파일의 버전 정보가 추가되어야 한다.</p><p><img src="../../../../images/versioning/tree.PNG" alt=""></p><p>version.properties에서 관리하기로 한다.</p><p><img src="../../../../images/versioning/version-properties.PNG" alt=""></p><p>version.number로 정적 파일의 빌드 버전을 관리한다. 밑의 version.date는 아래의 브라우저 캐싱에서 소개한다.</p><p>이제 jsp에서 정적파일 버전을 결정할 수 있도록 path에 추가한다.</p><p><img src="../../../../images/versioning/resource-version.PNG" alt=""></p><p>이제 js, css를 수정했을 경우 version.properties에서 version.number 값을 증가시켜서 배포하면 된다</p><h4 id="배포-서버에서의-설정"><a href="#배포-서버에서의-설정" class="headerlink" title="배포 서버에서의 설정"></a>배포 서버에서의 설정</h4><p>버전관리를 위해 Spring에서 Resource 경로를 /{버전번호}/resources 를 참조하도록 변경했다.<br>그러려면 서버에서는 수동으로 version number 디렉토리 만들고 정적파일들 cp로 옮기고 권한 부여하고 뭐하고 뭐하고 뭐하고…..   ===&gt;&gt; 자동화하자</p><p>정적 파일이 존재하는 디렉토리를 다음과 같이 구성한다</p><p><img src="../../../../images/versioning/build-dir.PNG" alt=""></p><p>BIULD_NUMBER는 현재 사용하고 있는 정적파일의 버전을 갖고 있는다</p><p><img src="../../../../images/versioning/build-version.PNG" alt=""></p><p>그러면 이제 스크립트를 통해 한방에 빠르게!! 정적파일만 선배포 할 준비가 끝났다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/web-resource</span><br><span class="line"></span><br><span class="line">bn=$(&lt;BUILD_NUMBER)</span><br><span class="line">bn=$((bn+1))</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$bn</span>&gt;BUILD_NUMBER</span><br><span class="line">mkdir <span class="variable">$bn</span></span><br><span class="line"></span><br><span class="line">mkdir temp</span><br><span class="line">unzip -d temp asog_recent.zip</span><br><span class="line">mv  temp/asog-1.0.0-BUILD-SNAPSHOT/resources <span class="variable">$bn</span>/</span><br><span class="line">chmod -R 0755 <span class="variable">$bn</span></span><br><span class="line">rm -rf temp</span><br><span class="line">rm -rf asog_recent.zip</span><br></pre></td></tr></table></figure><p>BUILD_NUMBER 에서 현재 빌드 번호를 가져오고 + 1 해서 새로운 버전의 디렉토리를 만든다.</p><p>이렇게 되면 배포시점에 HTML과 js,css 등 정적파일 매칭이 이루어지기 때문에 구서버, 신서버가 L4아래 함께있어도 호환 가능하다.</p><h2 id="이거로-문제가-다-해결되나"><a href="#이거로-문제가-다-해결되나" class="headerlink" title="이거로 문제가 다 해결되나?"></a>이거로 문제가 다 해결되나?</h2><p>그렇지 않다. 서버에서 버전에 맞는 css, js파일을 골라서 전해준다고 해도 클라이언트에서 요청하지 않으면 줄리가 없지.</p><p>브라우저에는 캐싱기능이 있다.</p><p>브라우저는 http://서비스주소/파일명.js 이렇게 다운받고 보관하고있다가 같은 URL 요청시 새로 요청을 하지 않는다. 그 기간과 상세부분은 브라우저마다 다를 수 있다.</p><h3 id="서버가-새로운-버전으로-업데이트-되었지만-파일명이-그대로라면"><a href="#서버가-새로운-버전으로-업데이트-되었지만-파일명이-그대로라면" class="headerlink" title="서버가 새로운 버전으로 업데이트 되었지만 파일명이 그대로라면?"></a>서버가 새로운 버전으로 업데이트 되었지만 파일명이 그대로라면?</h3><p>js, css의 URL이 그대로다. 브라우저는 새로 바뀐걸 모른다. 안받는다 =&gt; 와장창</p><h3 id="서버는-이-파일이-업데이트-되었는지-어떻게-클라이언트에게-알려줘야할까"><a href="#서버는-이-파일이-업데이트-되었는지-어떻게-클라이언트에게-알려줘야할까" class="headerlink" title="서버는 이 파일이 업데이트 되었는지 어떻게 클라이언트에게 알려줘야할까?"></a>서버는 이 파일이 업데이트 되었는지 어떻게 클라이언트에게 알려줘야할까?</h3><p>브라우저는 URL을 기준으로 갖는다. 즉 URL이 다르면 새로 받는다.</p><p>그렇다면 서버를 업데이트 할 때마다 정적 파일들을 새로운 버전의 디렉토리에 넣어야하나?</p><p>변수명을 바꾸고 공백을 지우고 정말 사소한건데도 리소스가 증가해야만하나!?</p><p>편한 방법으로 클라이언트가 새로운 파일을 요청하도록 하게 하려면 어떻게 해야할까</p><h3 id="쿼리스트링을-통해-배포-이후-웹-서비스-접근시-css-js를-새로-내려받도록-한다"><a href="#쿼리스트링을-통해-배포-이후-웹-서비스-접근시-css-js를-새로-내려받도록-한다" class="headerlink" title="쿼리스트링을 통해 배포 이후 웹 서비스 접근시 css, js를 새로 내려받도록 한다."></a>쿼리스트링을 통해 배포 이후 웹 서비스 접근시 css, js를 새로 내려받도록 한다.</h3><p>기존의 URL이 http://서비스주소/파일명.js 이렇게 생겼다고 할 때</p><p>기존 URL 대신 http://서비스주소/파일명.js?param=JingyuJung 이렇게 요청을 보내면 어떻게 될까?</p><p>파일명.js 라는 같은 파일을 요청하지만 뒤에 파라미터로 URL이 추가되었다.</p><p>=&gt; 파일이 수정되었을 때 param={값} 이부분을 수정하면 파일명의 변경 없이도 클라이언트가 파일을 새로 받게 할 수 있지 않을까?</p><h3 id="무슨-값을-넣어야-할까"><a href="#무슨-값을-넣어야-할까" class="headerlink" title="무슨 값을 넣어야 할까?"></a>무슨 값을 넣어야 할까?</h3><p>HTML과 js, css가 매칭되는 시점은 maven 빌드타이밍이 적절하다고 생각한다.</p><p>그렇다면 파라미터에 maven 빌드타임을 넣으면 좋을 것 같다.</p><p>메이븐 빌드타임 정보를 가져오기 위해 pom.xml에 다음의 플러그인과 설정을 추가한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.keyboardsamurais.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-timestamp-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">goal</span>&gt;</span>create<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">querystring</span>&gt;</span>$&#123;maven.build.timestamp&#125;<span class="tag">&lt;/<span class="name">querystring</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven.build.timestamp.format</span>&gt;</span>yyyyMMdd<span class="tag">&lt;/<span class="name">maven.build.timestamp.format</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이렇게 하면 <querystring> 은 이제 아래의 format에 맞는 timestamp값을 갖는다.</querystring></p><p>이제 version.properties에 다음의 정보를 추가할 수 있다.</p><p><img src="../../../../images/versioning/queryString.PNG" alt=""></p><p>${quertstring} 은 mvn package 타임에 yyyMMdd 형태의 날짜 데이터로 변환된다.</p><p>그러면 이제 spring context 타이밍에 쿼리스트링을 붙을 차례다</p><p><img src="../../../../images/versioning/qs.PNG" alt=""></p><p>정적 파일뒤에 spring tag를 이용해 쿼리스트링을 추가해준다.</p><h2 id="참고-spring-태그를-사용하기-위해서는-다음과-같은-라인을-jsp에-추가해야-한다"><a href="#참고-spring-태그를-사용하기-위해서는-다음과-같은-라인을-jsp에-추가해야-한다" class="headerlink" title="참고!! : spring 태그를 사용하기 위해서는 다음과 같은 라인을 jsp에 추가해야 한다"></a>참고!! : spring 태그를 사용하기 위해서는 다음과 같은 라인을 jsp에 추가해야 한다</h2><p><img src="../../../../images/versioning/springtag.PNG" alt=""></p><h2 id="두가지-방법이-차이가-뭔지-모르겠고-하나만-써도-되는거-아닌가"><a href="#두가지-방법이-차이가-뭔지-모르겠고-하나만-써도-되는거-아닌가" class="headerlink" title="두가지 방법이 차이가 뭔지 모르겠고 하나만 써도 되는거 아닌가?"></a>두가지 방법이 차이가 뭔지 모르겠고 하나만 써도 되는거 아닌가?</h2><p>둘 다 써야 한다.</p><p>두 가지의 차이점을 구분하려면 기준을 잘 정해야 한다.</p><ul><li>하위 호환이 가능하다 *</li></ul><p>수정한 js, css의 내용이 구버전과 신버전이 호환이 가능하다면 쿼리스트링으로 충분하기도 하다.</p><p>하위 호환이 불가능하다면 무조건 새로운 버전의 js, css가 필요하기 때문에 다른 디렉토리에 새로운 js, css를 복사해야하며 클라이언트가 새로운 파일을 받도록 쿼리스트링을 붙인다.</p><p>즉, 새로 WAS 배포시</p><p>쿼리스트링(필수) + 정적 파일 버전 업(옵션) 이라고 생각하면 될 것 같다.</p>]]></content>
    
    <summary type="html">
    
      js, css 정적 파일 버전 관리
WAS가 1개일때는 문제가 없지만 2개, 3개 … N개가 되면 새로운 문제가 발생한다.

크게 2가지 문제로 구분할 수 있다.

 1. 최신 Back-End와 구 Front-End 의 만남
    
    
 2. 브라우저 캐싱 &lt;- 사실 WAS가 1개일때도 문제
    
    

두가지 문제점은 어떤 이슈를 발생시키나??
깨진다. 웹페이지가 깨진다. 바스락. 와장창. js 또는 css를 제대로 가져오지 못하기 때문.

원인은?
L4로 묶여있는 웹 서버 집단에서 의도적으로 점진적 배포 혹은 일반
    
    </summary>
    
      <category term="Spring Framework" scheme="http://monibu1548.github.io/categories/Spring-Framework/"/>
    
    
      <category term="스프링 프레임워크" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="Spring Framework" scheme="http://monibu1548.github.io/tags/Spring-Framework/"/>
    
      <category term="Web" scheme="http://monibu1548.github.io/tags/Web/"/>
    
      <category term="웹" scheme="http://monibu1548.github.io/tags/%EC%9B%B9/"/>
    
      <category term="버전 관리" scheme="http://monibu1548.github.io/tags/%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC/"/>
    
      <category term="쿼리스트링" scheme="http://monibu1548.github.io/tags/%EC%BF%BC%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>자바 성능 튜닝 이야기</title>
    <link href="http://monibu1548.github.io/2017/03/05/javatuning/"/>
    <id>http://monibu1548.github.io/2017/03/05/javatuning/</id>
    <published>2017-03-05T05:51:36.000Z</published>
    <updated>2018-04-15T05:54:19.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Map-Set-List-Queue의-차이점"><a href="#Map-Set-List-Queue의-차이점" class="headerlink" title="Map, Set, List, Queue의 차이점"></a>Map, Set, List, Queue의 차이점</h2><table><thead><tr><th>인터페이스</th><th>구현 클래스</th><th>특징</th></tr></thead><tbody><tr><td>Map</td><td>HashMap<br>TreeMap<br>HashTable<br>Properties</td><td>Key-Value의 쌍으로 이루어진 데이터의 집합. 순서가 없으며 Key의 중복을 허용하지 않음. Value는 중복 가능</td></tr><tr><td>Set</td><td>HashSet<br>TreeSet</td><td>순서가 없는 데이터의 집합. 중복 불허</td></tr><tr><td>List</td><td>LinkedList<br>Stack<br>Vector<br>ArrayList</td><td>순서가 있는 데이터의 집합, 데이터의 중복 허용</td></tr><tr><td>Queue</td><td>PriorityQueue<br>ArrayDequeue</td><td>구조의 양쪽 단에서만 저장/접근할 수 있는 구조</td></tr></tbody></table><h2 id="Reflection-API를-이용하여-매개변수로-넘어온-클래스의-종류-및-메소드-목록을-출력하는-메소드"><a href="#Reflection-API를-이용하여-매개변수로-넘어온-클래스의-종류-및-메소드-목록을-출력하는-메소드" class="headerlink" title="Reflection API를 이용하여 매개변수로 넘어온 클래스의 종류 및 메소드 목록을 출력하는 메소드"></a>Reflection API를 이용하여 매개변수로 넘어온 클래스의 종류 및 메소드 목록을 출력하는 메소드</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printClassInfo</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">Class c = object.getClass();</span><br><span class="line">String className = c.getName();</span><br><span class="line">String classCanonicalName = c.getCanonicalName();</span><br><span class="line">String classSimpleName= c.getSimpleName();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Class name : "</span> + className);</span><br><span class="line">System.out.println(<span class="string">"Class canonical name : "</span> + classCanonicalName);</span><br><span class="line">System.out.println(<span class="string">"Class simple name : "</span> + classSimpleName);</span><br><span class="line"></span><br><span class="line">Field[] fields = c.getFields();</span><br><span class="line">System.out.println(<span class="string">"## "</span> + className + <span class="string">" fields"</span>);</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">System.out.println(field);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"## "</span> + className + <span class="string">" methods"</span>);</span><br><span class="line">Method[] methods = c.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">System.out.println(method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-Collection"><a href="#Java-Collection" class="headerlink" title="Java Collection"></a>Java Collection</h3><h2 id="SAX와-DOM-파서의-특징-및-장단점"><a href="#SAX와-DOM-파서의-특징-및-장단점" class="headerlink" title="SAX와 DOM 파서의 특징 및 장단점"></a>SAX와 DOM 파서의 특징 및 장단점</h2><table><thead><tr><th></th><th>DOM</th><th>SAX</th></tr></thead><tbody><tr><td>풀네임</td><td>Document Object Model</td><td>Simple Api for XML</td></tr><tr><td>설명</td><td>XML문서를 트리 구조 형태로 Access 할 수 있게 해주는 API</td><td>자료구조를 만들지 않고 XML문서를 스캔하면서 순차적으로 이벤트를 발생시켜 XML문서에 접근하게 하는 API</td></tr><tr><td>파싱 방법</td><td>Tree-Working 기반</td><td>Event 기반</td></tr><tr><td>처리 방법</td><td>메모리에 Tree 형태로 구조화</td><td>순차적 이벤트 발생 처리</td></tr></tbody></table><p>|장점| 1. 문서 구조의 동적 변경 용이 <br> 2. 문서 생성, 편집 가능 <br> 3. 복잡한 처리 연산에 유리 <br> | 1. 메모리 효율적 사용 <br> 2. 단순/속도 빠름 <br> 3. XML 문서 크기에 무관 |<br>|단점| 1. 메모리 사용량 많음 <br> 2. 처리속도 느림 <br> | 1. 문서 생성, 편집 불가 (Read 전용) <br> |<br>|접근 방식|Random Acecss|Streaming|</p><p>참조</p><ul><li><p>XML파싱 + DOM과 SAX의 차이 <a href="http://humble.tistory.com/23" target="_blank" rel="noopener">http://humble.tistory.com/23</a></p></li><li><p>DOM과 SAX을 비교하여 설명 <a href="http://i-bada.blogspot.kr/2012/05/dom-sax.html" target="_blank" rel="noopener">http://i-bada.blogspot.kr/2012/05/dom-sax.html</a></p></li></ul><h2 id="JMX"><a href="#JMX" class="headerlink" title="JMX ?"></a>JMX ?</h2><h3 id="JMX-Java-Management-Extensions"><a href="#JMX-Java-Management-Extensions" class="headerlink" title="JMX (Java Management Extensions)"></a>JMX (Java Management Extensions)</h3><p>어플리케이션과 서비스를 관리하고 감시하기 위한 표준</p><p>자바 기반의 어플리케이션을 모니터링하고 관리하는 기능을 제공</p><p>JSR 3 (Spec.) &amp; JSR 160 (Remote API) 에서 정의</p><p>J2SE 5.0부터 플랫폼에 포함</p><p>참조</p><ul><li>JMX 기초 <a href="http://blog.naver.com/PostView.nhn?blogId=ypark197&amp;logNo=90092368663" target="_blank" rel="noopener">http://blog.naver.com/PostView.nhn?blogId=ypark197&amp;logNo=90092368663</a></li></ul><h2 id="JMX를-모니터링-할-수-있는-도구"><a href="#JMX를-모니터링-할-수-있는-도구" class="headerlink" title="JMX를 모니터링 할 수 있는 도구"></a>JMX를 모니터링 할 수 있는 도구</h2><h3 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h3><p><a href="http://visualvm.java.net/" target="_blank" rel="noopener">VisualVM</a></p><h3 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h3><p><a href="http://java.sun.com/javase/6/docs/technotes/tools/share/jconsole.html" target="_blank" rel="noopener">JConsole</a></p><h3 id="JManage"><a href="#JManage" class="headerlink" title="JManage"></a>JManage</h3><p><a href="http://www.jmanage.org/" target="_blank" rel="noopener">JManage</a></p><h2 id="Web-access-log-패턴-분석"><a href="#Web-access-log-패턴-분석" class="headerlink" title="Web access log 패턴 분석"></a>Web access log 패턴 분석</h2><h3 id="httpd-conf-의-Log-format-설정"><a href="#httpd-conf-의-Log-format-설정" class="headerlink" title="httpd.conf 의 Log format 설정"></a>httpd.conf 의 Log format 설정</h3><p><img src="../../../../images/tuning/web-log.PNG" alt=""></p><table><thead><tr><th>표현문자</th><th>설명</th></tr></thead><tbody><tr><td>%i</td><td>헤더의 내용</td></tr><tr><td>%l</td><td>원격 로그인명</td></tr><tr><td>%u</td><td>원격 사용자</td></tr><tr><td>%t</td><td>common log format 시간 형식의 시간</td></tr><tr><td>%r</td><td>요청의 첫번째 줄</td></tr><tr><td>%s</td><td>status</td></tr><tr><td>%b</td><td>Http 헤더를 제외한 전송 바이트 수, ‘0’은 ‘-‘로 표시</td></tr><tr><td>%D</td><td>요청을 처리하는데 걸린 시간 (마이크로초 단위)</td></tr><tr><td>%T</td><td>요청을 처리하는데 걸린 시간 (초 단위)</td></tr></tbody></table><h2 id="자바-GC-종류"><a href="#자바-GC-종류" class="headerlink" title="자바 GC 종류"></a>자바 GC 종류</h2><h3 id="Serial-Collector"><a href="#Serial-Collector" class="headerlink" title="Serial Collector"></a>Serial Collector</h3><h3 id="Parallel-Collector"><a href="#Parallel-Collector" class="headerlink" title="Parallel Collector"></a>Parallel Collector</h3><h3 id="Parallel-Compacting-Collector"><a href="#Parallel-Compacting-Collector" class="headerlink" title="Parallel Compacting Collector"></a>Parallel Compacting Collector</h3><h3 id="Concurrnt-Mark-Sweep-Controller"><a href="#Concurrnt-Mark-Sweep-Controller" class="headerlink" title="Concurrnt Mark-Sweep Controller"></a>Concurrnt Mark-Sweep Controller</h3><h3 id="Garbage-First-Controller"><a href="#Garbage-First-Controller" class="headerlink" title="Garbage First Controller"></a>Garbage First Controller</h3><p>참조</p><ul><li>Garbage Collection -part 2 <a href="http://blog.embian.com/68" target="_blank" rel="noopener">http://blog.embian.com/68</a></li></ul><h2 id="GC-상황을-모니터링할-수-있는-도구"><a href="#GC-상황을-모니터링할-수-있는-도구" class="headerlink" title="GC 상황을 모니터링할 수 있는 도구"></a>GC 상황을 모니터링할 수 있는 도구</h2><h3 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h3><p><a href="http://docs.oracle.com/javase/7/docs/technotes/tools/share/jstat.html" target="_blank" rel="noopener">jstat</a></p><h3 id="GCViewer"><a href="#GCViewer" class="headerlink" title="GCViewer"></a>GCViewer</h3><p><a href="https://github.com/chewiebug/GCViewer" target="_blank" rel="noopener">GCViewer</a></p><h3 id="GC-Analyzer"><a href="#GC-Analyzer" class="headerlink" title="GC Analyzer"></a>GC Analyzer</h3><p><a href="http://glezen.org/gca/" target="_blank" rel="noopener">GC Analyzer</a></p><h2 id="JMH를-사용하여-Java-SE에-있는-List를-구현한-클래스들의-추가-조회-삭제-기능의-성능을-비교"><a href="#JMH를-사용하여-Java-SE에-있는-List를-구현한-클래스들의-추가-조회-삭제-기능의-성능을-비교" class="headerlink" title="JMH를 사용하여 Java SE에 있는 List를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교"></a>JMH를 사용하여 Java SE에 있는 List를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교</h2><p><img src="../../../../images/tuning/bench-list.PNG" alt=""></p><h2 id="JMH를-사용하여-Java-SE에-있는-Map를-구현한-클래스들의-추가-조회-삭제-기능의-성능을-비교"><a href="#JMH를-사용하여-Java-SE에-있는-Map를-구현한-클래스들의-추가-조회-삭제-기능의-성능을-비교" class="headerlink" title="JMH를 사용하여 Java SE에 있는 Map를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교"></a>JMH를 사용하여 Java SE에 있는 Map를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교</h2><p><img src="../../../../images/tuning/bench-map.PNG" alt=""></p>]]></content>
    
    <summary type="html">
    
      Map, Set, List, Queue의 차이점
인터페이스구현 클래스특징MapHashMap
TreeMap
HashTable
PropertiesKey-Value의 쌍으로 이루어진 데이터의 집합. 순서가 없으며 Key의 중복을 허용하지 않음. Value는 중복 가능SetHashSet
TreeSet순서가 없는 데이터의 집합. 중복 불허ListLinkedList
Stack
Vector
ArrayList순서가 있는 데이터의 집합, 데이터의 중복 허용QueuePriorityQueue
ArrayDequeue구조의 양쪽 단에서만 저장/접근할 수 
    
    </summary>
    
      <category term="Java" scheme="http://monibu1548.github.io/categories/Java/"/>
    
    
      <category term="java" scheme="http://monibu1548.github.io/tags/java/"/>
    
      <category term="성능 튜닝" scheme="http://monibu1548.github.io/tags/%EC%84%B1%EB%8A%A5-%ED%8A%9C%EB%8B%9D/"/>
    
  </entry>
  
  <entry>
    <title>오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링</title>
    <link href="http://monibu1548.github.io/2017/03/03/grafana/"/>
    <id>http://monibu1548.github.io/2017/03/03/grafana/</id>
    <published>2017-03-03T05:08:38.000Z</published>
    <updated>2018-04-25T14:26:16.684Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../../../images/grafana/title.jpg" alt=""></p><h1 id="오픈소스-Grafana와-InfluxDB를-활용한-서버-모니터링"><a href="#오픈소스-Grafana와-InfluxDB를-활용한-서버-모니터링" class="headerlink" title="오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링"></a>오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링</h1><h2 id="왜-쓰는가"><a href="#왜-쓰는가" class="headerlink" title="왜 쓰는가?"></a>왜 쓰는가?</h2><p>서버의 리소스 (CPU 사용량 및 메모리 사용량)이나 웹 사이트 URL의 호출 횟수, 응답시간 등 서버 개발자가 실시간 모니터링해야 하는 자원을 쉽게 모아서 실시간으로 보여줄 수 있다.</p><p>간단한 사용 후기로는 Grafana가 그래프를 그려주는게 InfluxDB에 있는 데이터를 가져와서 그려준다. 그릴 데이터를 sql 쿼리로 가져온다. 신기하다!! 물론 DB는 InfluxDB외에도 다른 Plugin을 통해 가져올 수 있다.</p><h2 id="Grafana는"><a href="#Grafana는" class="headerlink" title="Grafana는?"></a>Grafana는?</h2><p>서버 모니터링 대시보드 오픈소스. 이런식으로 그려준다.!</p><p><img src="../../../../images/grafana/ex.jpg" alt=""></p><p>얼마나 아름다운가!</p><p>시간대 별로. DB에서 사용자 쿼리에 의해 얻어진 데이터로 자동으로 그려준다.</p><p>Go와 Nodejs 디펜던시를 갖고있다.</p><h2 id="InfluxDB는"><a href="#InfluxDB는" class="headerlink" title="InfluxDB는?"></a>InfluxDB는?</h2><p>시계열(Time-series) DB. 시계열 데이터란 시간의 흐름에 따라 저장하는 데이터로 서버 환경에서 각종 지표를 수집하는 목적으로 사용한다. http protocol을 이용해 외부에서 제어도 가능하며 표준 SQL을 통해 데이터를 다룰 수 있다.</p><h1 id="시작은-설치로부터"><a href="#시작은-설치로부터" class="headerlink" title="시작은 설치로부터!"></a>시작은 설치로부터!</h1><h2 id="Grafana-설치"><a href="#Grafana-설치" class="headerlink" title="Grafana 설치"></a>Grafana 설치</h2><ul><li>centos6 기준으로 설치한 내용입니다. 모든 설치는 패키지를 사용하지 않고 portable로 진행합니다.</li></ul><h3 id="Go-디펜던시-설치"><a href="#Go-디펜던시-설치" class="headerlink" title="Go 디펜던시 설치"></a>Go 디펜던시 설치</h3><p>go 다운로드 페이지</p><p><a href="https://golang.org/dl/" target="_blank" rel="noopener">https://golang.org/dl/</a></p><p>서버환경에 맞는 tar.gz 파일을 받고 tar로 압축을 해제한다.</p><p>GOPATH와 GOROOT 환경변수를 설정해야합니다.</p><p>GOPATH는 GO에서 받는 데이터를 보관할 장소. ~/grafana 를 만들고 이곳으로 설정했습니다.</p><p>GOROOT는 다운받은 go의 홈디렉토리입니다.</p><p>/.bashrc 에 다음과 같은 내용을 추가합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="string">'/&#123;home&#125;/&#123;username&#125;/grafana'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GOROOT=<span class="string">'/&#123;다운 받은 go 위치&#125;'</span></span><br></pre></td></tr></table></figure><p>그리고 수정한 .bashrc를 적용합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><p>그 후 grafana source 를 다운로드합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">go get github.com/grafana/grafana</span><br></pre></td></tr></table></figure><p>그러면 $GOPATH에 grafana 디렉토리가 생긴 것을 볼 수 있습니다.</p><p>이어서 grafana를 설치하기 전에 nodejs를 설치합니다.</p><h3 id="nodejs-디펜던시-설치"><a href="#nodejs-디펜던시-설치" class="headerlink" title="nodejs 디펜던시 설치"></a>nodejs 디펜던시 설치</h3><p> <a href="https://nodejs.org/download/" target="_blank" rel="noopener">https://nodejs.org/download/</a></p><p> 위 링크에서 nodejs를 다운받습니다. 최신 버전도 많이 나왔지만 저는 4.7사용.. 서버도 옛날꺼고..파이썬도 옛날거고…. node만 최신이면 꼬일것 같은 기분!</p><p> node도 환경변수로 등록해서 터미널에서 node를 입력했을 때 node 가 바로 실행되어야 합니다.</p><h3 id="이제-진짜-grafana-설치"><a href="#이제-진짜-grafana-설치" class="headerlink" title="이제 진짜 grafana 설치"></a>이제 진짜 grafana 설치</h3><p> 일단 go를 이용해 grafana를 받은 위치로 이동하고 설치를 시작합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/grafana/grafana</span><br><span class="line"></span><br><span class="line">go run build.go setup</span><br><span class="line"></span><br><span class="line">go run build.go build</span><br></pre></td></tr></table></figure><p>이제 여기까지 grafana의 설치가 끝났습니다!!!는 Back-end만.. 이대로 실행하면 Front-end 와장창</p><p>이제 grunt로 Front-end를 가져옵니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install -g yarn</span><br><span class="line"></span><br><span class="line">yarn install --pure-lockfile</span><br><span class="line"></span><br><span class="line">npm install -g grunt-cli</span><br><span class="line"></span><br><span class="line">grunt</span><br></pre></td></tr></table></figure><p>이제 진짜 설치 끝!!!</p><p>grafana 디렉토리의 ./bin/grafana-server 를 실행시킵니다.</p><p>그러면 기본적으로 3000번 포트로 구동되며. <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 로 접근해서 확인할 수 있습니다. 일단 다른 프로그램이 3000번을 잡고있으면 안된다!</p><p><strong> 정말 설치만 하고 실행했다. 설정파일을 통해 admin 계정 등 보안을 위해 많은 설정이 필요하다 </strong></p><h3 id="InfluxDB-설치"><a href="#InfluxDB-설치" class="headerlink" title="InfluxDB 설치"></a>InfluxDB 설치</h3><p>이제 데이터를 예쁘게 그려줄 대쉬보드를 설치했으니 데이터를 저장할 DB를 설치해야한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget https://dl.influxdata.com/influxdb/releases/influxdb-1.2.0_linux_amd64.tar.gz</span><br><span class="line">tar xvfz influxdb-1.2.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><p>2017-03-03일 기준이므로</p><p><a href="https://portal.influxdata.com/downloads#influxdb" target="_blank" rel="noopener">https://portal.influxdata.com/downloads#influxdb</a></p><p>에서 최신버전을 확인하고 설치하는 것을 추천. Standalone 으로!!!!</p><p>다운로드가 완료되면 influxdb 하위 ./usr/bin 의 influxd를 실행한다</p><p>influxd 가 influxDB 데몬이며 influx 는 influxDB 의 cli 클라이언트다.</p><h2 id="Grafana와-InfluxDB-연동하기"><a href="#Grafana와-InfluxDB-연동하기" class="headerlink" title="Grafana와 InfluxDB 연동하기"></a>Grafana와 InfluxDB 연동하기</h2><p>가장 어려운 부분이었다.</p><p>Grafana 페이지. localhost:3000 에서 설정한다. 로그인을 해야한다면 기본 id는 admin, 기본 pw도 admin 이다.</p><p>이제 Grafana 페이지의 DataSource메뉴에서 InfluxDB를 연결한다.</p><p>ip와 포트를 연결하고 Save&amp;Test 버튼을 누른다. 연결이 되었는지 안되었는지는 알려준다!!</p><p>초록불이 뜰때까지 정보들을 맞게 수정한다!!</p><h2 id="Grafana에서-그래프-그리기"><a href="#Grafana에서-그래프-그리기" class="headerlink" title="Grafana에서 그래프 그리기"></a>Grafana에서 그래프 그리기</h2><p>쉽다.</p><ul><li>Dashboard 추가.</li><li>그래프 추가</li><li>각 축에 쿼리문 작성</li></ul><p>TIP. add query로 쿼리 추가해서 막 블록형태로 쿼리를 만든다.. 이거 쓰지말자.. 잘 안된다.<br>쿼리 쓰는데 옆에보면 햄버거 버튼이 있다. Toggle custom query를 통해 직접 query를 작성하자.</p><p>이렇게 해서 나온 내 서비스의 모니터링 페이지!!</p><p><img src="../../../../images/grafana/result.PNG" alt=""></p><h2 id="후기"><a href="#후기" class="headerlink" title="후기"></a>후기</h2><p>Grafana와 InfluxDB를 설치하고 그래프를 그리기까지 2~3일 삽질은 해야하지 않을까 생각했었다. 둘 다 처음사용해보는데다가 디펜던시가 몇가지 있어서 어디선가 터질꺼라 생각했다..! But 설치까지는 1시간만에 끝나버렸다..</p><p>문제는 설치보다 grafana 대시보드 구성과 시계열 데이터에 대한 이해! sql 을 이용해 그래프를 그린다는게 생각하기 힘들었다. 또 시계열 데이터를 어떻게 그려야 원하는 그래프가 나오는지 어렵다 ㅠㅜ.</p><p>grafana에 아쉬운점은 그래프 Scale 을 조절하기 힘들다는 것! 마우스를 이용해 끄적끄적하면 그래프도 좌우로 이동되고 Zoom in out도 되면 좋겠다!!!!</p><p>있는 기능인데 발견을 못한 것일수도!</p><p>좀 더 능숙하게 쓸 수 있도록 이것저것 해봐야겠다</p>]]></content>
    
    <summary type="html">
    
      오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링
왜 쓰는가?
서버의 리소스 (CPU 사용량 및 메모리 사용량)이나 웹 사이트 URL의 호출 횟수, 응답시간 등 서버 개발자가 실시간 모니터링해야 하는 자원을 쉽게 모아서 실시간으로 보여줄 수 있다.

간단한 사용 후기로는 Grafana가 그래프를 그려주는게 InfluxDB에 있는 데이터를 가져와서 그려준다. 그릴 데이터를 sql 쿼리로 가져온다. 신기하다!! 물론 DB는 InfluxDB외에도 다른 Plugin을 통해 가져올 수 있다.

Grafana는?
서버 모니터링 
    
    </summary>
    
      <category term="ETC" scheme="http://monibu1548.github.io/categories/ETC/"/>
    
    
      <category term="grafana" scheme="http://monibu1548.github.io/tags/grafana/"/>
    
      <category term="influxDB" scheme="http://monibu1548.github.io/tags/influxDB/"/>
    
      <category term="모니터링" scheme="http://monibu1548.github.io/tags/%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81/"/>
    
  </entry>
  
  <entry>
    <title>웹 최적화 (Apache mod_deflate 모듈을 이용한 압축 전송)</title>
    <link href="http://monibu1548.github.io/2017/03/01/web-optimize-2/"/>
    <id>http://monibu1548.github.io/2017/03/01/web-optimize-2/</id>
    <published>2017-03-01T05:34:28.000Z</published>
    <updated>2018-04-15T05:38:10.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Apache-mod-deflate-모듈을-이용한-압축-전송"><a href="#Apache-mod-deflate-모듈을-이용한-압축-전송" class="headerlink" title="Apache mod_deflate 모듈을 이용한 압축 전송"></a>Apache mod_deflate 모듈을 이용한 압축 전송</h1><p><a href="http://monibu1548.github.io/web-optimize-1/">지난번 WAS와 WEB의 분리</a>를 통해 js, css 등의 정적 파일은 apache에서 서비스 하도록 변경했다.</p><p>js, css등의 파일을 압축 전송하여 좀 더 빠르게 사용자에게 전송할 수 있다.</p><p>물론 장단점이 존재한다.</p><p>장점 : 압축전송으로 인해 좀 더 빠른 전송, 적은 네트워크 트래픽<br>단점 : 보낼때마다 서버의 압축과정 =&gt; 부하 가능성, 브라우저는 받아서 압축 해제해야 하는 추가 과정 필요</p><h2 id="mod-deflate"><a href="#mod-deflate" class="headerlink" title="mod_deflate"></a>mod_deflate</h2><p>gzip 압축전송을 하기 위해서는 apache의 mod_deflate 모듈을 사용한다. mod_deflate모듈은 apache 2.2 버전부터 기본으로 포함되어있다. 그래도 혹시모르니 httpd.conf 에서 확인해보자.</p><h3 id="apache-conf-httpd-conf"><a href="#apache-conf-httpd-conf" class="headerlink" title="apache/conf/httpd.conf"></a>apache/conf/httpd.conf</h3><p><img src="../../../../images/web-optimize/deflate-module.PNG" alt=""></p><p>역시 기본으로 LoadModule하고 있다</p><h3 id="모듈-설정"><a href="#모듈-설정" class="headerlink" title="모듈 설정"></a>모듈 설정</h3><p>이제 어떤 파일을 압축할지, 얼마나 압축할지 등의 상세 설정이 필요하다. httpd.conf에서 설정해도 되며 별도의 파일로도 분리 가능하다.</p><p>일단 같은 파일에 작성!</p><p><img src="../../../../images/web-optimize/deflate-setting.PNG" alt=""></p><ul><li>AddOutputFilterByType DEFLATE {압축할 content type}</li><li>DeflateCompressionLevel : 압축률, 높을수록 많이 압축한다</li><li>BrowerMatch : gzip를 받아주는 브라우저도 있고 안받아주는 브라우저도 있다. 그에 관련된 설정</li><li>SetEnvIfNoCase Request_URI {파일확장자 정규표현식} {환경변수..} : 해당 파일확장자에 대한 요청이 오면 환경변수들을 설정한다. 여기서 NoCase는 대소문자를 가리지 않겠다는 의미</li></ul><hr><ul><li>DefalteFilterNote Input : 로그 관련, 원본 파일 크기</li><li>DefalteFilterNote Output : 로그 관련, 압축된 파일 크기</li><li>DeflateFilterNote Ratio : 로그 관련, 압축 비율</li><li>LogFormat : 로그 관련, 로그 출력 형태 지정</li></ul><h2 id="압축이-돼서-오는지-확인해보자"><a href="#압축이-돼서-오는지-확인해보자" class="headerlink" title="압축이 돼서 오는지 확인해보자"></a>압축이 돼서 오는지 확인해보자</h2><h2 id="일단-현재-압축-전송이-되고-있나-확인해보자"><a href="#일단-현재-압축-전송이-되고-있나-확인해보자" class="headerlink" title="일단!! 현재 압축 전송이 되고 있나 확인해보자!"></a>일단!! 현재 압축 전송이 되고 있나 확인해보자!</h2><p>크롬 개발자도구에서 “Network” 탭을 열고 Ctrl + Shift + F5 를 눌러서 강력 새로고침을 누르면 js, css등 많은 파일을 받는 것을 볼 수 있다.</p><p><img src="../../../../images/web-optimize/gz_after.PNG" alt=""></p><p>Requst Headers를 보면 Content-Encoding에 gzip이 표시되는 것을 확인할 수 있다.</p><p>만약 mod_deflate를 사용하지 않았다면??</p><p>httpd.conf에서 LoadModule mod_deflate.so를 주석처리하고 apache를 재실행하고 다시 페이지를 로드하면</p><p><img src="../../../../images/web-optimize/gz_before.PNG" alt=""></p><p>mod_deflate를 사용하기 이전에는 그냥 js파일이 생으로 날라오고 있었다는 것을 확인할 수 있다.</p><h2 id="실제로-압축이-얼마나-돼서-전송될까"><a href="#실제로-압축이-얼마나-돼서-전송될까" class="headerlink" title="실제로 압축이 얼마나 돼서 전송될까??"></a>실제로 압축이 얼마나 돼서 전송될까??</h2><p>mod_deflate의 로그 파일을 통해 알아볼 수 있다.</p><p>virtual host에 CustomLog를 추가한다.</p><p><img src="../../../../images/web-optimize/log_setting.png" alt=""></p><p>웹 페이지에 접속하여 apache가 파일 전송을 위해 압축을 하게되면 deflate.log가 쌓이는 것을 볼 수 있다.</p><p>내용을 살펴보면 다음과 같다.</p><p><img src="../../../../images/web-optimize/deflate_result.PNG" alt=""></p><p>{HTTP method} {파일경로} {HTTP 버전} {압축 후 크기 / 압축 전 크기} {압축률}</p><p>압축률을 9로 설정해서 그런지 상당히 많이 압축된다.</p><h3 id="참고사항"><a href="#참고사항" class="headerlink" title="참고사항"></a>참고사항</h3><ul><li>사실 js와 css를 gzip하는거보다 minify하는게 더 효과적이라고 한다</li><li>png, pdf 등의 파일은 이미 압축되어 있어서 압축하지 말아야 한다</li><li>아주 적은 json 또는 text를 반환하는 경우 압축하지 않는 것이 좋다.</li></ul>]]></content>
    
    <summary type="html">
    
      Apache mod_deflate 모듈을 이용한 압축 전송
지난번 WAS와 WEB의 분리를 통해 js, css 등의 정적 파일은 apache에서 서비스 하도록 변경했다.

js, css등의 파일을 압축 전송하여 좀 더 빠르게 사용자에게 전송할 수 있다.

물론 장단점이 존재한다.

장점 : 압축전송으로 인해 좀 더 빠른 전송, 적은 네트워크 트래픽
단점 : 보낼때마다 서버의 압축과정 =&gt; 부하 가능성, 브라우저는 받아서 압축 해제해야 하는 추가 과정 필요

mod_deflate
gzip 압축전송을 하기 위해서는 apache의 mod
    
    </summary>
    
      <category term="Spring Framework" scheme="http://monibu1548.github.io/categories/Spring-Framework/"/>
    
    
      <category term="스프링 프레임워크" scheme="http://monibu1548.github.io/tags/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="Spring Framework" scheme="http://monibu1548.github.io/tags/Spring-Framework/"/>
    
      <category term="Web" scheme="http://monibu1548.github.io/tags/Web/"/>
    
      <category term="웹" scheme="http://monibu1548.github.io/tags/%EC%9B%B9/"/>
    
      <category term="최적화" scheme="http://monibu1548.github.io/tags/%EC%B5%9C%EC%A0%81%ED%99%94/"/>
    
  </entry>
  
</feed>
