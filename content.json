{"meta":{"title":"JingyuJung's Blog","subtitle":null,"description":null,"author":"Jingyu Jung","url":"http://monibu1548.github.io"},"pages":[],"posts":[{"title":"NHNent가 만든 협업 서비스 Dooray","slug":"dooray","date":"2018-03-29T06:12:58.000Z","updated":"2018-04-15T06:14:17.407Z","comments":true,"path":"2018/03/29/dooray/","link":"","permalink":"http://monibu1548.github.io/2018/03/29/dooray/","excerpt":"JIRA vs Line Works vs Dooray 직접 사용해본 후기 JIRA : 강력한 스프린트 관리 기능! But, 위키가 쌓이면 쌓일수록 최신화 안되는 문서들이 가득, 문서찾기도 힘듦ㅠㅜ Line Works : 네이버 메일, 드라이브, 캘린더를 그대로 가져와서 익숙하다! Dooray : 처음에 배우기 어렵다…. 하지만 익숙해지면 이만한게 없다!! 빠른 문서찾기, 태그! 메신저, 메일, 프로젝트, 드라이브 안되는게 없다! Dooray의 강력한 기능들! HOOK을 통해서 자동으로 업무 등록, 댓글등록이 가능해요 * 빌드를","text":"JIRA vs Line Works vs Dooray 직접 사용해본 후기JIRA : 강력한 스프린트 관리 기능! But, 위키가 쌓이면 쌓일수록 최신화 안되는 문서들이 가득, 문서찾기도 힘듦ㅠㅜ Line Works : 네이버 메일, 드라이브, 캘린더를 그대로 가져와서 익숙하다! Dooray : 처음에 배우기 어렵다…. 하지만 익숙해지면 이만한게 없다!! 빠른 문서찾기, 태그! 메신저, 메일, 프로젝트, 드라이브 안되는게 없다! Dooray의 강력한 기능들!HOOK을 통해서 자동으로 업무 등록, 댓글등록이 가능해요 빌드를 하거나 이슈가 발생했을때 바로바로 업무등록 및 수정 알림! 우선순위, 태그, 완료일, 마일스톤 지정까지 상세하게! 업무의 우선순위 확인이나 나중에 검색할 때 엄청 편해요 메신저도 엄청나다 현재 자리에 있는지, 자리비움인지 한눈에 볼 수 있어요 업무에 최적인 메일 자동 분류 기능으로 쉽게 분류하고 찾아볼 수 있어요 그 외…말로 표현할 수 없는 정말 유용하고 다양한 기능들 마크다운으로 글을 이쁘게 쓰면 PPT 발표모드로도 사용할 수 있어요 UML도 그릴 수 있죠 다른 업무 자체를 태그할 수도 있어요 담당자에게 일을 빨리 빨리 넘길 수 있죠 NHN entertainment의 Dooray! 많이 사용해주세요 :)","categories":[{"name":"NHN ent.","slug":"NHN-ent","permalink":"http://monibu1548.github.io/categories/NHN-ent/"}],"tags":[{"name":"Dooray","slug":"Dooray","permalink":"http://monibu1548.github.io/tags/Dooray/"},{"name":"NHN","slug":"NHN","permalink":"http://monibu1548.github.io/tags/NHN/"}]},{"title":"웹 js, css 정적 파일 버전관리 방법","slug":"web-optimize-3","date":"2017-03-10T05:57:20.000Z","updated":"2018-04-15T06:00:07.019Z","comments":true,"path":"2017/03/10/web-optimize-3/","link":"","permalink":"http://monibu1548.github.io/2017/03/10/web-optimize-3/","excerpt":"js, css 정적 파일 버전 관리 WAS가 1개일때는 문제가 없지만 2개, 3개 … N개가 되면 새로운 문제가 발생한다. 크게 2가지 문제로 구분할 수 있다. 1. 최신 Back-End와 구 Front-End 의 만남 2. 브라우저 캐싱","text":"js, css 정적 파일 버전 관리WAS가 1개일때는 문제가 없지만 2개, 3개 … N개가 되면 새로운 문제가 발생한다. 크게 2가지 문제로 구분할 수 있다. 최신 Back-End와 구 Front-End 의 만남 브라우저 캐싱 &lt;- 사실 WAS가 1개일때도 문제 두가지 문제점은 어떤 이슈를 발생시키나??깨진다. 웹페이지가 깨진다. 바스락. 와장창. js 또는 css를 제대로 가져오지 못하기 때문. 원인은?L4로 묶여있는 웹 서버 집단에서 의도적으로 점진적 배포 혹은 일반 배포 단계에서 각 서버의 버전이 불일치 하는 현상이 생긴다. 이 시점에서 HTML과 js, css 요청 서버가 달라지면 서로 호환되지 않아 깨짐현상이 발생한다. 해결방법은?최신 Back-End와 구 Front-End 의 만남 =&gt; 정적 파일 버전 관리정적 파일 선배포 및 버전관리 후 Back-End 배포하여 배포 당시 시점의 css, js를 정확히 호출하게 한다. Spring에서의 설정Spring 프로젝트에 현재 정적파일의 버전 정보가 추가되어야 한다. version.properties에서 관리하기로 한다. version.number로 정적 파일의 빌드 버전을 관리한다. 밑의 version.date는 아래의 브라우저 캐싱에서 소개한다. 이제 jsp에서 정적파일 버전을 결정할 수 있도록 path에 추가한다. 이제 js, css를 수정했을 경우 version.properties에서 version.number 값을 증가시켜서 배포하면 된다 배포 서버에서의 설정버전관리를 위해 Spring에서 Resource 경로를 /{버전번호}/resources 를 참조하도록 변경했다.그러려면 서버에서는 수동으로 version number 디렉토리 만들고 정적파일들 cp로 옮기고 권한 부여하고 뭐하고 뭐하고 뭐하고….. ===&gt;&gt; 자동화하자 정적 파일이 존재하는 디렉토리를 다음과 같이 구성한다 BIULD_NUMBER는 현재 사용하고 있는 정적파일의 버전을 갖고 있는다 그러면 이제 스크립트를 통해 한방에 빠르게!! 정적파일만 선배포 할 준비가 끝났다 12345678910111213cd ~/web-resourcebn=$(&lt;BUILD_NUMBER)bn=$((bn+1))echo $bn&gt;BUILD_NUMBERmkdir $bnmkdir tempunzip -d temp asog_recent.zipmv temp/asog-1.0.0-BUILD-SNAPSHOT/resources $bn/chmod -R 0755 $bnrm -rf temprm -rf asog_recent.zip BUILD_NUMBER 에서 현재 빌드 번호를 가져오고 + 1 해서 새로운 버전의 디렉토리를 만든다. 이렇게 되면 배포시점에 HTML과 js,css 등 정적파일 매칭이 이루어지기 때문에 구서버, 신서버가 L4아래 함께있어도 호환 가능하다. 이거로 문제가 다 해결되나?그렇지 않다. 서버에서 버전에 맞는 css, js파일을 골라서 전해준다고 해도 클라이언트에서 요청하지 않으면 줄리가 없지. 브라우저에는 캐싱기능이 있다. 브라우저는 http://서비스주소/파일명.js 이렇게 다운받고 보관하고있다가 같은 URL 요청시 새로 요청을 하지 않는다. 그 기간과 상세부분은 브라우저마다 다를 수 있다. 서버가 새로운 버전으로 업데이트 되었지만 파일명이 그대로라면?js, css의 URL이 그대로다. 브라우저는 새로 바뀐걸 모른다. 안받는다 =&gt; 와장창 서버는 이 파일이 업데이트 되었는지 어떻게 클라이언트에게 알려줘야할까?브라우저는 URL을 기준으로 갖는다. 즉 URL이 다르면 새로 받는다. 그렇다면 서버를 업데이트 할 때마다 정적 파일들을 새로운 버전의 디렉토리에 넣어야하나? 변수명을 바꾸고 공백을 지우고 정말 사소한건데도 리소스가 증가해야만하나!? 편한 방법으로 클라이언트가 새로운 파일을 요청하도록 하게 하려면 어떻게 해야할까 쿼리스트링을 통해 배포 이후 웹 서비스 접근시 css, js를 새로 내려받도록 한다.기존의 URL이 http://서비스주소/파일명.js 이렇게 생겼다고 할 때 기존 URL 대신 http://서비스주소/파일명.js?param=JingyuJung 이렇게 요청을 보내면 어떻게 될까? 파일명.js 라는 같은 파일을 요청하지만 뒤에 파라미터로 URL이 추가되었다. =&gt; 파일이 수정되었을 때 param={값} 이부분을 수정하면 파일명의 변경 없이도 클라이언트가 파일을 새로 받게 할 수 있지 않을까? 무슨 값을 넣어야 할까?HTML과 js, css가 매칭되는 시점은 maven 빌드타이밍이 적절하다고 생각한다. 그렇다면 파라미터에 maven 빌드타임을 넣으면 좋을 것 같다. 메이븐 빌드타임 정보를 가져오기 위해 pom.xml에 다음의 플러그인과 설정을 추가한다. 12345678910111213&lt;plugin&gt; &lt;groupId&gt;com.keyboardsamurais.maven&lt;/groupId&gt; &lt;artifactId&gt;maven-timestamp-plugin&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;create&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 1234&lt;properties&gt; &lt;querystring&gt;$&#123;maven.build.timestamp&#125;&lt;/querystring&gt; &lt;maven.build.timestamp.format&gt;yyyyMMdd&lt;/maven.build.timestamp.format&gt;&lt;/properties&gt; 이렇게 하면 은 이제 아래의 format에 맞는 timestamp값을 갖는다. 이제 version.properties에 다음의 정보를 추가할 수 있다. ${quertstring} 은 mvn package 타임에 yyyMMdd 형태의 날짜 데이터로 변환된다. 그러면 이제 spring context 타이밍에 쿼리스트링을 붙을 차례다 정적 파일뒤에 spring tag를 이용해 쿼리스트링을 추가해준다. 참고!! : spring 태그를 사용하기 위해서는 다음과 같은 라인을 jsp에 추가해야 한다 두가지 방법이 차이가 뭔지 모르겠고 하나만 써도 되는거 아닌가?둘 다 써야 한다. 두 가지의 차이점을 구분하려면 기준을 잘 정해야 한다. 하위 호환이 가능하다 * 수정한 js, css의 내용이 구버전과 신버전이 호환이 가능하다면 쿼리스트링으로 충분하기도 하다. 하위 호환이 불가능하다면 무조건 새로운 버전의 js, css가 필요하기 때문에 다른 디렉토리에 새로운 js, css를 복사해야하며 클라이언트가 새로운 파일을 받도록 쿼리스트링을 붙인다. 즉, 새로 WAS 배포시 쿼리스트링(필수) + 정적 파일 버전 업(옵션) 이라고 생각하면 될 것 같다.","categories":[{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/categories/Spring-Framework/"}],"tags":[{"name":"스프링 프레임워크","slug":"스프링-프레임워크","permalink":"http://monibu1548.github.io/tags/스프링-프레임워크/"},{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/tags/Spring-Framework/"},{"name":"Web","slug":"Web","permalink":"http://monibu1548.github.io/tags/Web/"},{"name":"웹","slug":"웹","permalink":"http://monibu1548.github.io/tags/웹/"},{"name":"버전 관리","slug":"버전-관리","permalink":"http://monibu1548.github.io/tags/버전-관리/"},{"name":"쿼리스트링","slug":"쿼리스트링","permalink":"http://monibu1548.github.io/tags/쿼리스트링/"}]},{"title":"자바 성능 튜닝 이야기","slug":"javatuning","date":"2017-03-05T05:51:36.000Z","updated":"2018-04-15T05:54:19.322Z","comments":true,"path":"2017/03/05/javatuning/","link":"","permalink":"http://monibu1548.github.io/2017/03/05/javatuning/","excerpt":"Map, Set, List, Queue의 차이점 인터페이스구현 클래스특징MapHashMap TreeMap HashTable PropertiesKey-Value의 쌍으로 이루어진 데이터의 집합. 순서가 없으며 Key의 중복을 허용하지 않음. Value는 중복 가능SetHashSet TreeSet순서가 없는 데이터의 집합. 중복 불허ListLinkedList Stack Vector ArrayList순서가 있는 데이터의 집합, 데이터의 중복 허용QueuePriorityQueue ArrayDequeue구조의 양쪽 단에서만 저장/접근할 수","text":"Map, Set, List, Queue의 차이점 인터페이스 구현 클래스 특징 Map HashMapTreeMapHashTableProperties Key-Value의 쌍으로 이루어진 데이터의 집합. 순서가 없으며 Key의 중복을 허용하지 않음. Value는 중복 가능 Set HashSetTreeSet 순서가 없는 데이터의 집합. 중복 불허 List LinkedListStackVectorArrayList 순서가 있는 데이터의 집합, 데이터의 중복 허용 Queue PriorityQueueArrayDequeue 구조의 양쪽 단에서만 저장/접근할 수 있는 구조 Reflection API를 이용하여 매개변수로 넘어온 클래스의 종류 및 메소드 목록을 출력하는 메소드12345678910111213141516171819202122public void printClassInfo(Object object)&#123; Class c = object.getClass(); String className = c.getName(); String classCanonicalName = c.getCanonicalName(); String classSimpleName= c.getSimpleName(); System.out.println(\"Class name : \" + className); System.out.println(\"Class canonical name : \" + classCanonicalName); System.out.println(\"Class simple name : \" + classSimpleName); Field[] fields = c.getFields(); System.out.println(\"## \" + className + \" fields\"); for (Field field : fields) &#123; System.out.println(field); &#125; System.out.println(\"## \" + className + \" methods\"); Method[] methods = c.getMethods(); for (Method method : methods) &#123; System.out.println(method); &#125;&#125; Java CollectionSAX와 DOM 파서의 특징 및 장단점 DOM SAX 풀네임 Document Object Model Simple Api for XML 설명 XML문서를 트리 구조 형태로 Access 할 수 있게 해주는 API 자료구조를 만들지 않고 XML문서를 스캔하면서 순차적으로 이벤트를 발생시켜 XML문서에 접근하게 하는 API 파싱 방법 Tree-Working 기반 Event 기반 처리 방법 메모리에 Tree 형태로 구조화 순차적 이벤트 발생 처리 |장점| 1. 문서 구조의 동적 변경 용이 2. 문서 생성, 편집 가능 3. 복잡한 처리 연산에 유리 | 1. 메모리 효율적 사용 2. 단순/속도 빠름 3. XML 문서 크기에 무관 ||단점| 1. 메모리 사용량 많음 2. 처리속도 느림 | 1. 문서 생성, 편집 불가 (Read 전용) ||접근 방식|Random Acecss|Streaming| 참조 XML파싱 + DOM과 SAX의 차이 http://humble.tistory.com/23 DOM과 SAX을 비교하여 설명 http://i-bada.blogspot.kr/2012/05/dom-sax.html JMX ?JMX (Java Management Extensions)어플리케이션과 서비스를 관리하고 감시하기 위한 표준 자바 기반의 어플리케이션을 모니터링하고 관리하는 기능을 제공 JSR 3 (Spec.) &amp; JSR 160 (Remote API) 에서 정의 J2SE 5.0부터 플랫폼에 포함 참조 JMX 기초 http://blog.naver.com/PostView.nhn?blogId=ypark197&amp;logNo=90092368663 JMX를 모니터링 할 수 있는 도구VisualVMVisualVM JConsoleJConsole JManageJManage Web access log 패턴 분석httpd.conf 의 Log format 설정 표현문자 설명 %i 헤더의 내용 %l 원격 로그인명 %u 원격 사용자 %t common log format 시간 형식의 시간 %r 요청의 첫번째 줄 %s status %b Http 헤더를 제외한 전송 바이트 수, ‘0’은 ‘-‘로 표시 %D 요청을 처리하는데 걸린 시간 (마이크로초 단위) %T 요청을 처리하는데 걸린 시간 (초 단위) 자바 GC 종류Serial CollectorParallel CollectorParallel Compacting CollectorConcurrnt Mark-Sweep ControllerGarbage First Controller참조 Garbage Collection -part 2 http://blog.embian.com/68 GC 상황을 모니터링할 수 있는 도구jstatjstat GCViewerGCViewer GC AnalyzerGC Analyzer JMH를 사용하여 Java SE에 있는 List를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교 JMH를 사용하여 Java SE에 있는 Map를 구현한 클래스들의 추가/조회/삭제 기능의 성능을 비교","categories":[{"name":"Java","slug":"Java","permalink":"http://monibu1548.github.io/categories/Java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://monibu1548.github.io/tags/java/"},{"name":"성능 튜닝","slug":"성능-튜닝","permalink":"http://monibu1548.github.io/tags/성능-튜닝/"}]},{"title":"오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링","slug":"grafana","date":"2017-03-03T05:08:38.000Z","updated":"2018-04-15T05:27:46.207Z","comments":true,"path":"2017/03/03/grafana/","link":"","permalink":"http://monibu1548.github.io/2017/03/03/grafana/","excerpt":"오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링 왜 쓰는가? 서버의 리소스 (CPU 사용량 및 메모리 사용량)이나 웹 사이트 URL의 호출 횟수, 응답시간 등 서버 개발자가 실시간 모니터링해야 하는 자원을 쉽게 모아서 실시간으로 보여줄 수 있다. 간단한 사용 후기로는 Grafana가 그래프를 그려주는게 InfluxDB에 있는 데이터를 가져와서 그려준다. 그릴 데이터를 sql 쿼리로 가져온다. 신기하다!! 물론 DB는 InfluxDB외에도 다른 Plugin을 통해 가져올 수 있다. Grafana는? 서버 모니터링","text":"오픈소스 Grafana와 InfluxDB를 활용한 서버 모니터링왜 쓰는가?서버의 리소스 (CPU 사용량 및 메모리 사용량)이나 웹 사이트 URL의 호출 횟수, 응답시간 등 서버 개발자가 실시간 모니터링해야 하는 자원을 쉽게 모아서 실시간으로 보여줄 수 있다. 간단한 사용 후기로는 Grafana가 그래프를 그려주는게 InfluxDB에 있는 데이터를 가져와서 그려준다. 그릴 데이터를 sql 쿼리로 가져온다. 신기하다!! 물론 DB는 InfluxDB외에도 다른 Plugin을 통해 가져올 수 있다. Grafana는?서버 모니터링 대시보드 오픈소스. 이런식으로 그려준다.! 얼마나 아름다운가! 시간대 별로. DB에서 사용자 쿼리에 의해 얻어진 데이터로 자동으로 그려준다. Go와 Nodejs 디펜던시를 갖고있다. InfluxDB는?시계열(Time-series) DB. 시계열 데이터란 시간의 흐름에 따라 저장하는 데이터로 서버 환경에서 각종 지표를 수집하는 목적으로 사용한다. http protocol을 이용해 외부에서 제어도 가능하며 표준 SQL을 통해 데이터를 다룰 수 있다. 시작은 설치로부터!Grafana 설치 centos6 기준으로 설치한 내용입니다. 모든 설치는 패키지를 사용하지 않고 portable로 진행합니다. Go 디펜던시 설치go 다운로드 페이지 https://golang.org/dl/ 서버환경에 맞는 tar.gz 파일을 받고 tar로 압축을 해제한다. GOPATH와 GOROOT 환경변수를 설정해야합니다. GOPATH는 GO에서 받는 데이터를 보관할 장소. ~/grafana 를 만들고 이곳으로 설정했습니다. GOROOT는 다운받은 go의 홈디렉토리입니다. /.bashrc 에 다음과 같은 내용을 추가합니다. 1234export GOPATH='/&#123;home&#125;/&#123;username&#125;/grafana'export GOROOT='/&#123;다운 받은 go 위치&#125;' 그리고 수정한 .bashrc를 적용합니다. 12source .bashrc 그 후 grafana source 를 다운로드합니다. 12go get github.com/grafana/grafana 그러면 $GOPATH에 grafana 디렉토리가 생긴 것을 볼 수 있습니다. 이어서 grafana를 설치하기 전에 nodejs를 설치합니다. nodejs 디펜던시 설치 https://nodejs.org/download/ 위 링크에서 nodejs를 다운받습니다. 최신 버전도 많이 나왔지만 저는 4.7사용.. 서버도 옛날꺼고..파이썬도 옛날거고…. node만 최신이면 꼬일것 같은 기분! node도 환경변수로 등록해서 터미널에서 node를 입력했을 때 node 가 바로 실행되어야 합니다. 이제 진짜 grafana 설치 일단 go를 이용해 grafana를 받은 위치로 이동하고 설치를 시작합니다. 123456cd $GOPATH/src/github.com/grafana/grafanago run build.go setupgo run build.go build 이제 여기까지 grafana의 설치가 끝났습니다!!!는 Back-end만.. 이대로 실행하면 Front-end 와장창 이제 grunt로 Front-end를 가져옵니다. 12345678npm install -g yarnyarn install --pure-lockfilenpm install -g grunt-cligrunt 이제 진짜 설치 끝!!! grafana 디렉토리의 ./bin/grafana-server 를 실행시킵니다. 그러면 기본적으로 3000번 포트로 구동되며. http://localhost:3000 로 접근해서 확인할 수 있습니다. 일단 다른 프로그램이 3000번을 잡고있으면 안된다! 정말 설치만 하고 실행했다. 설정파일을 통해 admin 계정 등 보안을 위해 많은 설정이 필요하다 InfluxDB 설치이제 데이터를 예쁘게 그려줄 대쉬보드를 설치했으니 데이터를 저장할 DB를 설치해야한다. 123wget https://dl.influxdata.com/influxdb/releases/influxdb-1.2.0_linux_amd64.tar.gztar xvfz influxdb-1.2.0_linux_amd64.tar.gz 2017-03-03일 기준이므로 https://portal.influxdata.com/downloads#influxdb 에서 최신버전을 확인하고 설치하는 것을 추천. Standalone 으로!!!! 다운로드가 완료되면 influxdb 하위 ./usr/bin 의 influxd를 실행한다 influxd 가 influxDB 데몬이며 influx 는 influxDB 의 cli 클라이언트다. Grafana와 InfluxDB 연동하기가장 어려운 부분이었다. Grafana 페이지. localhost:3000 에서 설정한다. 로그인을 해야한다면 기본 id는 admin, 기본 pw도 admin 이다. 이제 Grafana 페이지의 DataSource메뉴에서 InfluxDB를 연결한다. ip와 포트를 연결하고 Save&amp;Test 버튼을 누른다. 연결이 되었는지 안되었는지는 알려준다!! 초록불이 뜰때까지 정보들을 맞게 수정한다!! Grafana에서 그래프 그리기쉽다. Dashboard 추가. 그래프 추가 각 축에 쿼리문 작성 TIP. add query로 쿼리 추가해서 막 블록형태로 쿼리를 만든다.. 이거 쓰지말자.. 잘 안된다.쿼리 쓰는데 옆에보면 햄버거 버튼이 있다. Toggle custom query를 통해 직접 query를 작성하자. 이렇게 해서 나온 내 서비스의 모니터링 페이지!! 후기Grafana와 InfluxDB를 설치하고 그래프를 그리기까지 2~3일 삽질은 해야하지 않을까 생각했었다. 둘 다 처음사용해보는데다가 디펜던시가 몇가지 있어서 어디선가 터질꺼라 생각했다..! But 설치까지는 1시간만에 끝나버렸다.. 문제는 설치보다 grafana 대시보드 구성과 시계열 데이터에 대한 이해! sql 을 이용해 그래프를 그린다는게 생각하기 힘들었다. 또 시계열 데이터를 어떻게 그려야 원하는 그래프가 나오는지 어렵다 ㅠㅜ. grafana에 아쉬운점은 그래프 Scale 을 조절하기 힘들다는 것! 마우스를 이용해 끄적끄적하면 그래프도 좌우로 이동되고 Zoom in out도 되면 좋겠다!!!! 있는 기능인데 발견을 못한 것일수도! 좀 더 능숙하게 쓸 수 있도록 이것저것 해봐야겠다","categories":[{"name":"생산성","slug":"생산성","permalink":"http://monibu1548.github.io/categories/생산성/"}],"tags":[{"name":"grafana","slug":"grafana","permalink":"http://monibu1548.github.io/tags/grafana/"},{"name":"influxDB","slug":"influxDB","permalink":"http://monibu1548.github.io/tags/influxDB/"},{"name":"모니터링","slug":"모니터링","permalink":"http://monibu1548.github.io/tags/모니터링/"}]},{"title":"웹 최적화 (Apache mod_deflate 모듈을 이용한 압축 전송)","slug":"web-optimize-2","date":"2017-03-01T05:34:28.000Z","updated":"2018-04-15T05:38:10.756Z","comments":true,"path":"2017/03/01/web-optimize-2/","link":"","permalink":"http://monibu1548.github.io/2017/03/01/web-optimize-2/","excerpt":"Apache mod_deflate 모듈을 이용한 압축 전송 지난번 WAS와 WEB의 분리를 통해 js, css 등의 정적 파일은 apache에서 서비스 하도록 변경했다. js, css등의 파일을 압축 전송하여 좀 더 빠르게 사용자에게 전송할 수 있다. 물론 장단점이 존재한다. 장점 : 압축전송으로 인해 좀 더 빠른 전송, 적은 네트워크 트래픽 단점 : 보낼때마다 서버의 압축과정 => 부하 가능성, 브라우저는 받아서 압축 해제해야 하는 추가 과정 필요 mod_deflate gzip 압축전송을 하기 위해서는 apache의 mod","text":"Apache mod_deflate 모듈을 이용한 압축 전송지난번 WAS와 WEB의 분리를 통해 js, css 등의 정적 파일은 apache에서 서비스 하도록 변경했다. js, css등의 파일을 압축 전송하여 좀 더 빠르게 사용자에게 전송할 수 있다. 물론 장단점이 존재한다. 장점 : 압축전송으로 인해 좀 더 빠른 전송, 적은 네트워크 트래픽단점 : 보낼때마다 서버의 압축과정 =&gt; 부하 가능성, 브라우저는 받아서 압축 해제해야 하는 추가 과정 필요 mod_deflategzip 압축전송을 하기 위해서는 apache의 mod_deflate 모듈을 사용한다. mod_deflate모듈은 apache 2.2 버전부터 기본으로 포함되어있다. 그래도 혹시모르니 httpd.conf 에서 확인해보자. apache/conf/httpd.conf 역시 기본으로 LoadModule하고 있다 모듈 설정이제 어떤 파일을 압축할지, 얼마나 압축할지 등의 상세 설정이 필요하다. httpd.conf에서 설정해도 되며 별도의 파일로도 분리 가능하다. 일단 같은 파일에 작성! AddOutputFilterByType DEFLATE {압축할 content type} DeflateCompressionLevel : 압축률, 높을수록 많이 압축한다 BrowerMatch : gzip를 받아주는 브라우저도 있고 안받아주는 브라우저도 있다. 그에 관련된 설정 SetEnvIfNoCase Request_URI {파일확장자 정규표현식} {환경변수..} : 해당 파일확장자에 대한 요청이 오면 환경변수들을 설정한다. 여기서 NoCase는 대소문자를 가리지 않겠다는 의미 DefalteFilterNote Input : 로그 관련, 원본 파일 크기 DefalteFilterNote Output : 로그 관련, 압축된 파일 크기 DeflateFilterNote Ratio : 로그 관련, 압축 비율 LogFormat : 로그 관련, 로그 출력 형태 지정 압축이 돼서 오는지 확인해보자일단!! 현재 압축 전송이 되고 있나 확인해보자!크롬 개발자도구에서 “Network” 탭을 열고 Ctrl + Shift + F5 를 눌러서 강력 새로고침을 누르면 js, css등 많은 파일을 받는 것을 볼 수 있다. Requst Headers를 보면 Content-Encoding에 gzip이 표시되는 것을 확인할 수 있다. 만약 mod_deflate를 사용하지 않았다면?? httpd.conf에서 LoadModule mod_deflate.so를 주석처리하고 apache를 재실행하고 다시 페이지를 로드하면 mod_deflate를 사용하기 이전에는 그냥 js파일이 생으로 날라오고 있었다는 것을 확인할 수 있다. 실제로 압축이 얼마나 돼서 전송될까??mod_deflate의 로그 파일을 통해 알아볼 수 있다. virtual host에 CustomLog를 추가한다. 웹 페이지에 접속하여 apache가 파일 전송을 위해 압축을 하게되면 deflate.log가 쌓이는 것을 볼 수 있다. 내용을 살펴보면 다음과 같다. {HTTP method} {파일경로} {HTTP 버전} {압축 후 크기 / 압축 전 크기} {압축률} 압축률을 9로 설정해서 그런지 상당히 많이 압축된다. 참고사항 사실 js와 css를 gzip하는거보다 minify하는게 더 효과적이라고 한다 png, pdf 등의 파일은 이미 압축되어 있어서 압축하지 말아야 한다 아주 적은 json 또는 text를 반환하는 경우 압축하지 않는 것이 좋다.","categories":[{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/categories/Spring-Framework/"}],"tags":[{"name":"스프링 프레임워크","slug":"스프링-프레임워크","permalink":"http://monibu1548.github.io/tags/스프링-프레임워크/"},{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/tags/Spring-Framework/"},{"name":"Web","slug":"Web","permalink":"http://monibu1548.github.io/tags/Web/"},{"name":"웹","slug":"웹","permalink":"http://monibu1548.github.io/tags/웹/"},{"name":"최적화","slug":"최적화","permalink":"http://monibu1548.github.io/tags/최적화/"}]},{"title":"웹 최적화 (WEB과 WAS의 분리)","slug":"web-optimize-1","date":"2017-02-26T05:32:07.000Z","updated":"2018-04-15T05:35:52.690Z","comments":true,"path":"2017/02/26/web-optimize-1/","link":"","permalink":"http://monibu1548.github.io/2017/02/26/web-optimize-1/","excerpt":"WEB과 WAS의 분리, (Apache와 Tomcat 분리) Apache (웹 서버) 는 static한 파일 (js, img, css) 등 변동이 없는 파일을 서비스하기 위해 사용되어 왔다. Tomcat (웹 어플리케이션 서버, 이하 WAS) 는 사용자의 요청 등에 따라 유동적인 서비스를 제공하기 위해 사용한다. WEB은 static 파일 서비스에 유리하고, WAS는 동적인 서비스를 제공하는데 유리하다. 현재까지 구현한 웹 서비스에서는 WEB은 WAS로 proxy 기능만 하고있다. 즉 WEB의 장점을 사용하지 못하고 있었다.","text":"WEB과 WAS의 분리, (Apache와 Tomcat 분리)Apache (웹 서버) 는 static한 파일 (js, img, css) 등 변동이 없는 파일을 서비스하기 위해 사용되어 왔다. Tomcat (웹 어플리케이션 서버, 이하 WAS) 는 사용자의 요청 등에 따라 유동적인 서비스를 제공하기 위해 사용한다. WEB은 static 파일 서비스에 유리하고, WAS는 동적인 서비스를 제공하는데 유리하다. 현재까지 구현한 웹 서비스에서는 WEB은 WAS로 proxy 기능만 하고있다. 즉 WEB의 장점을 사용하지 못하고 있었다. 구글신에게 WAS와 WEB의 분리라는 키워드로 두시간 정도 검색하고 자료를 모아본 결과 크게 2가지 결론을 구할 수 있었다. apache의 mod_jk를 이용한 정적 파일 서비스 mod_jk 설정에서 어떤 url을 was로 던질지 결정한다. 즉 was에서 처리해야 할 것만 was로 던지고 나머지는 apache가 처리한다. 여기서 흥미로웠던 사실! .nhn .do 등 url에 이상한 확장자 느낌? 으로 사용하는 웹 서비스들을 자주 봐왔다. 저게 뭔가 했더니 알고보니 mod_jk 설정에 의해 WAS로 처리하라는 명시적인 기호였다. apache의 mod_proxy를 이용한 정적 파일 서비스 별도의 CDN이나 정적 파일 서버가 존재할 때 유용한 방법이다. /static 또는 /content 등 정적파일용 uri router를 만들고 해당 url로 접근시 정적 파일 서버로 proxy 하는 방법으로 사용할 수 있다. 내가 내린 결론 어렵지 않아야 한다=&gt; 메이븐 라이프 사이클에 끝나야 한다. 메이븐 라이프 사이클 밖에서 파일을 옮기고 하는 작업은 다른 서버에서는 어떻게 동작할지 확신할 수 없으니 최대한 피해야 한다. 이런 고민을 통해 다음과 같은 결과를 얻을 수 있었다. httpd.conf 에서 Proxy만 잘 하면 war파일 상태 그대로 js, css만 apache가 서비스할 수 있을 것이다. 이게 고민 끝에 내린 답. ProxyPass를 보면 ROOT 로 접근하면 127.0.0.1:9001, 즉 WAS 서비스 포트로 Proxy한다. resources/img 로 접근하면 proxy를 사용하지 않겠다는 “!” 가 있다. 마찬가지로 resources/js resources/css 도 proxy 를 사용하지 않는다는 뜻이다. proxy를 사용하지 않는다는 것은 apache의 DocumentRoot 로 부터 파일을 찾게 한다는 뜻이다. DocumentRoot를 현재 서비스하고 있는 war의 디렉토리로 설정하면 proxy를 제거한 부분은 apache가 서비스 하게 된다. 경로를 끼워맞추는 느낌? 한번에 잘 될리가 없지브라우저에서 base url을 입력해서 웹 서비스 화면으로 이동해보자. js와 css가 제대로 불러와지고 있나 확인. 크롬 개발자 도구에서 쉽게 볼 수 있다. 403 권한 관련 에러가 발생하는 경우tomcat의 server.xml 설정에 따라 다르겠지만 기본적으로는 ${TOMCAT_HOME}/webapps 디렉토리 밑에 배포가 된다. 서비스하고 있는 디렉토리부터 js, css파일까지의 권한이 없어서 발생하는 문제로 해당 경로를 따라가며 others 가 read, excute 할 수 있는 권한을 준다. 나는 755를 부여했다. 404 Not Found 에러가 발생하는 경우경로문제. 처음부터 다시 경로를 잘 살펴봐야 한다. 이번엔 진짜 잘 되나 보자다시 웹 서비스 화면으로 이동한다. js와 css가 정상적으로 로드되어 문제 없이 서비스 되어야 한다 진짜 잘 된건가? apache가 아니라 그냥 tomcat이 파일 주는거 아냐?원래 WAS로 js, css 줄 때도 잘 됐으니 이 js,css를 apache가 주는건지 tomcat이 주는건지 어떻게 알아. 테스트해보면 알지ex) http://baseurl/resources/img/plus.PNG 내 서비스 경로에는 다음과 같은 이미지 하나가 있다. 접속해보면 이미지가 잘 나온다. 이제 파일명을 이상하게 수정해보자. 없는 파일로! 에러메세지를 볼꺼니까! ex) http://baseurl/resources/img/plus-hahahahahahhahahahahah.PNG 이런 에러 화면을 볼 수 있다. 웹 개발하면서 자주 보던 톰캣의 Internal server 500 error 화면이랑 다르다는걸 느껴야한다! 얘는 apache가 주는 에러창이니까!! apache가 이 파일을 찾고 있다!!! 잘 되고 있다!! 만약 proxy 설정이 잘못되어 WAS가 아직도 static 파일을 서비스 하고 있었다면 이 에러페이지는 tomcat의 404 에러 메세지가 떴을것이다. 이런식으로 이로써 WAS와 WEB이 각자 제 역할을 부여받았다. 곧 업데이트할 웹 최적화 시리즈 정적 파일 배포 버전관리 쿼리스트링을 이용한 웹 캐싱 방지","categories":[{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/categories/Spring-Framework/"}],"tags":[{"name":"스프링 프레임워크","slug":"스프링-프레임워크","permalink":"http://monibu1548.github.io/tags/스프링-프레임워크/"},{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/tags/Spring-Framework/"},{"name":"Web","slug":"Web","permalink":"http://monibu1548.github.io/tags/Web/"},{"name":"웹","slug":"웹","permalink":"http://monibu1548.github.io/tags/웹/"},{"name":"최적화","slug":"최적화","permalink":"http://monibu1548.github.io/tags/최적화/"}]},{"title":"Jasypt를 이용한 properties 암호화 spring4","slug":"jasypt","date":"2017-02-09T05:43:00.000Z","updated":"2018-04-15T05:45:51.522Z","comments":true,"path":"2017/02/09/jasypt/","link":"","permalink":"http://monibu1548.github.io/2017/02/09/jasypt/","excerpt":"Github 또는 그 외의 공개 장소에 프로젝트 관리를 하다보면 DB 패스워드 등 보안에 민감한 정보들이 노출되기 쉽다. 깃헙에 delete password 라는 키워드로 커밋 검색 결과… delete password 커밋해도.. 이전 커밋에는 패스워드가 노출되어있다는 것.. 애초에 올리질 말아야 한다 그 외에 OAuth에 필요한 키, 다른 API 토큰들 이런 정보는 보호해야 한다. 하지만 문제가 되는 부분인 협업을 하면서 민감한 정보들만 보호하면서 공유해야한다는 것이다. 지금까지는 해당 설정파일을 따로 만들고 설정파일만","text":"Github 또는 그 외의 공개 장소에 프로젝트 관리를 하다보면 DB 패스워드 등 보안에 민감한 정보들이 노출되기 쉽다. 깃헙에 delete password 라는 키워드로 커밋 검색 결과… delete password 커밋해도.. 이전 커밋에는 패스워드가 노출되어있다는 것.. 애초에 올리질 말아야 한다 그 외에 OAuth에 필요한 키, 다른 API 토큰들 이런 정보는 보호해야 한다. 하지만 문제가 되는 부분인 협업을 하면서 민감한 정보들만 보호하면서 공유해야한다는 것이다. 지금까지는 해당 설정파일을 따로 만들고 설정파일만 메신저로 공유하며 Github에는 설정파일을 제외한 정보들만 올리는 방법을 사용했다. 이번 기회에 제대로 된 정석적인 방법을 구글링 했고 몇가지 키워드를 얻을 수 있었다. Maven의 pom 암호화 기능. pom.xml에 민감한 정보가 들어가야 할 때, 예를 들면 deploy 타이밍에 서버 계정이 들어가야 하는데 이 부분을 암호화 할 수 있도록 도와준다고 한다. 내가 찾던 properties 암호화는 아니었지만 알아두면 좋을 것 같다. https://maven.apache.org/guides/mini/guide-encryption.html Jasypt 라이브러리 Encrption이라는 키워드로 검색했을 때 Jasypt 라는 라이브러리가 자주 등장했다. 자바에서 암호화를 쉽게 할 수 있도록 도와주는 라이브러리였다. 나는 Spring에서 프로젝트가 실행될 때 암호화를 해제하는걸 원했는데 관련 블로그에서는 java 코드 내에서 암호화, 복호화 하는 내용만 다루고 있었다. Spring Jasypt 역시 Spring에 적용 가능한 Library가 존재했다. 암호화 된 패스워드를 풀기 위한 Key는 각 서버의 환경변수로 보관함으로써 Github에는 암호화 된 프로젝트를 올릴 수 있었다. Jasypt 그 엄청난 삽질기Jasypt 는 꽤 오래된 라이브러리였다. 현재 maven repo에 있는 1.9.2.. 2014년 2월 버전. spring 3.1버전 지원한다고 되어있고 그 이후로는 업뎃이 없었다. 이게 발목을 잡을 줄이야.. Jasypt이 properties를 암호화 하고 사용하는 방식 Tomcat에서 Spring 프로젝트가 올라가면서 context 가 생성된다 그 타이밍에 context에 있는 jasypt 객체들이 암호를 풀어준다. 암호를 풀려면 “키” 가 있어야 한다. 근데 결국 “키” 가 프로젝트 내부에 있으면 보안 없는거나 마찬가지 아닌가? 그래서 그 “키”는 프로젝트 내부가 아니라 구동 서버의 환경변수로 존재한다. 고로 안전하다. Jasypt을 사용해보자maven dependency 설정 pom.xmp 에 Jasypt-spring 라이브러리를 추가한다. 123456&lt;dependency&gt; &lt;groupId&gt;org.jasypt&lt;/groupId&gt; &lt;artifactId&gt;jasypt-spring31&lt;/artifactId&gt; &lt;version&gt;1.9.2&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 메이븐 레포를 보면 jasypt-spring31, jasypt-spring3 이렇게 두 가지 버전이 있다. jasypt-spring3은 spring 3.0까지 지원하고 그 이후로는 jasypt-spring31이 spring3.1 부터 최신까지 지원한다고 공식 홈페이지에 써있다. Spring 4.3.3 을 쓰는 지금 jasypt-spring31을 사용해서 동작을 확인했다. spring context 설정 context에 복호화를 위한 객체 3개를 bean으로 만들어준다. 1234567891011121314151617181920&lt;beans:bean id=\"encryptorConfig\" class=\"org.jasypt.encryption.pbe.config.EnvironmentPBEConfig\"&gt; &lt;beans:property name=\"algorithm\" value=\"PBEWithMD5AndDES\" /&gt; &lt;beans:property name=\"passwordEnvName\" value=\"ASOG_ENCRYPTION_KEY\" /&gt;&lt;/beans:bean&gt;&lt;beans:bean id=\"encryptor\" class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\"&gt; &lt;beans:property name=\"config\" ref=\"encryptorConfig\" /&gt;&lt;/beans:bean&gt;&lt;beans:bean class=\"org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer\"&gt; &lt;beans:constructor-arg ref=\"encryptor\" /&gt; &lt;beans:property name=\"locations\"&gt; &lt;beans:list&gt; &lt;beans:value&gt;classpath:config/jdbc/jdbc.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/oauth/OAuthFacebook.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/oauth/OAuthPayco.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/objectstorage/objectstorage.properties&lt;/beans:value&gt; &lt;/beans:list&gt; &lt;/beans:property&gt;&lt;/beans:bean&gt; 이렇게 3가지 bean을 만든다. 1개씩 살펴보자. 1234&lt;beans:bean id=\"encryptorConfig\" class=\"org.jasypt.encryption.pbe.config.EnvironmentPBEConfig\"&gt; &lt;beans:property name=\"algorithm\" value=\"PBEWithMD5AndDES\" /&gt; &lt;beans:property name=\"passwordEnvName\" value=\"ASOG_ENCRYPTION_KEY\" /&gt;&lt;/beans:bean&gt; algorithm암/복호화 알고리즘이다. 암호화 할 때 쓴 알고리즘 이름을 넣어야 한다. 저 필드에 넣을 수 있는 값은 여기에서 볼 수 있다. passwordEnvName환경변수로 지정한 키 값이다. 리눅스 기준 echo $ASOG_ENCRYPTION_KEY 했을 때 출력되는 값을 넣어주는 부분이다. “키” 를 프로젝트 내부가 아닌 외부에 저장하는 방식.당연히 프로젝트 복호화를 위해 서버 bashrc 등 rc 파일에 export ASOG_ENCRYPTION_KEY={진짜 키} 가 되어 있어야 한다. 안그러면 익셉션 발생! 123&lt;beans:bean id=\"encryptor\" class=\"org.jasypt.encryption.pbe.StandardPBEStringEncryptor\"&gt; &lt;beans:property name=\"config\" ref=\"encryptorConfig\" /&gt;&lt;/beans:bean&gt; 여긴 별 거 없다. StandardPBEStringEncryptor PBEEncryptor를 상속받는 다른 클래스도 사용할 수 있다는 거만 알아두자. 1234567891011&lt;beans:bean class=\"org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer\"&gt; &lt;beans:constructor-arg ref=\"encryptor\" /&gt; &lt;beans:property name=\"locations\"&gt; &lt;beans:list&gt; &lt;beans:value&gt;classpath:config/jdbc/jdbc.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/oauth/OAuthFacebook.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/oauth/OAuthPayco.properties&lt;/beans:value&gt; &lt;beans:value&gt;classpath:config/objectstorage/objectstorage.properties&lt;/beans:value&gt; &lt;/beans:list&gt; &lt;/beans:property&gt;&lt;/beans:bean&gt; 이곳에서 암호화 된 값들이 있는 .properties 파일의 위치를 설정한다. 주의해야 할 점이라고 한다면 bean class 부분을 보면 얘만 spring31 패키지에 포함되어있다는 것 삽질한 부분 properties 파일은 다음과 같이 생겼다. 그리고 사용하는 부분은 context.xml의 경우 다음과 같다. 현재 잘 구동되는 코드.. 그리고 이제 다음에 안돌아 가던 코드.. 차이점… value에서 “#” 을 이용해서 가져오느냐 “$”를 이용해서 가져오느냐의 차이.. 과거에는 “$”를 이용해서 properties를 가져오는 방식을 많이 사용했다고 한다. 이 경우 각 프로퍼티 파일들이 하나로 인식되어 다른 파일에 같은 프로퍼티가 있을경우 중복되어 에러 발생가능성이 있다고 한다. 그래서 언제부터인지는 모르겠지만 “#” 키워드를 이용해 파일마다 id를 부여하여 이런 문제를 겪지 않도록 한다고 한다. “#”이라고 하면 jasypt가 복호화 안해준다. jar파일 디버깅까지 하면서 찾은 결과.. “$” 방식으로 프로퍼티를 읽어야 jasypt가 복호화 해준다..ㄷㄷ “#”이 최신방식이라고 했는데!! 아마 jasypt가 옛날 라이브러리라 그런가 싶다. 그래서 암호화는 어떻게 하냐고?유틸리티를 다운받는다 bat, sh 로 제공되어 윈도우, 맥, 서버환경 모두 사용 가능하다. http://www.jasypt.org/download.html 다운받고 압축을 풀고 bin 디렉토리에 들어가보면 이렇게 생겼다. 구성품 encrypt.sh : 암호화 툴 decrypt.sh : 복호화 툴 digest.sh : 모르겠음, 사용안함 listAlgorithms : 사용 가능한 암복호화 알고리즘 리스트 보여줌 encrypt로 암호화 해보자 일단 그냥 encrypt.sh를 실행해보자 친절하게 사용법을 알려준다. 그럼 알려준대로 실행해보자 OUTPUT 나온 값을 이제 properties 파일에 써준다. ENC(OUTPUT나온 값) 이렇게 써야 한다. 주의할 점 input과 password 필드가 있다. input이 암호화 할 대상이고 password는 대칭키다. 헷갈리면 안된다. 다시 input은 실제 DB비번 등 암호화 해야 하는 대상. password는 환경변수로 갖고 있어야 할 키. 참고이클립스에서 환경변수 값을 못읽는다? eclipse에서는 환경변수 못 읽는다. 검색해봤는데 영어로 어렵게 설명해준다. 결론은 project -&gt; run configuration 에 들어가면 직접 환경변수 설정할 수 있다는 것이다. jasypt 에서 not operation exception 발생하는 경우무슨 정책 때문에 그렇다고 한다. 오라클 홈페이지 가서 자신이 사용하는 JDK 버전에 맞춰서 JCE 다운받아서 덮어씌우라고 한다. 나는 이 경우가 없어서 사용하진 않았지만 혹시몰라서 메모!","categories":[{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/categories/Spring-Framework/"}],"tags":[{"name":"Jasypt","slug":"Jasypt","permalink":"http://monibu1548.github.io/tags/Jasypt/"},{"name":"스프링 프레임워크","slug":"스프링-프레임워크","permalink":"http://monibu1548.github.io/tags/스프링-프레임워크/"},{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/tags/Spring-Framework/"}]},{"title":"WAR(웹 어플리케이션) 배포","slug":"web-deploy","date":"2017-01-22T06:04:50.000Z","updated":"2018-04-15T06:06:16.619Z","comments":true,"path":"2017/01/22/web-deploy/","link":"","permalink":"http://monibu1548.github.io/2017/01/22/web-deploy/","excerpt":"Tomcat의 주요 디렉토리 구조 디렉토리설명bintomcat 실행에 필요한 바이너리conf설정파일","text":"Tomcat의 주요 디렉토리 구조 디렉토리 설명 bin tomcat 실행에 필요한 바이너리 conf 설정파일 &lt;- 중요하다!! webapps 웹앱들의 루트 폴더 work jsp파일을 서블릿 형태로 변환한 java파일 톰캣 환경설정 ( server.xml ) server.xml 을 보면 몇가지 태그로 정보를 구분할 수 있다. 태그 설명 Service tomcat의 구성요소를 정의한다. 기본적으로 Catalina로 되어 있다 Connector 서비스 요청이 왔을 때 Engine에게 넘겨주는 역할. 포트번호와 프로토콜을 설정한다 Engine servlet의 인스턴스 단위. Engine으로부터 넘겨받은 요청을 처리하는 단위 Host Engine에 관련된 가상호스트를 정의한다. 호스트 이름이 무엇인지, war파일의 기본 디렉토리 등의 설정이 가능하다 Host Engine에 관련된 가상호스트를 정의한다. 호스트 이름이 무엇인지, war파일의 기본 디렉토리 등의 설정이 가능하다. 개인적으로 가장 중요한 부분이라고 생각한다 WARmvn package 명령어를 통해 프로젝트의 WAR파일을 생성할 수 있다. WAR파일의 이름은 [프로젝트명]-버전-빌드-스냅샷.war 로 매우 길다. 하지만 tomcat 경로에 배치할 때는 줄이겠지 당연히!!pom.xml에서 mvn package의 결과로 생성할 WAR파일의 이름을 미리 지정할 수 있으니 알아두는 것이 좋을것 같다. 주의해야 할 사항간혹 소스코드 내에 host를 포함한 상대 경로가 들어가는 경우가 있다. server.xml 설정에 따라 다르겠지만 http://localhost/project/ 가 될 수도 있고 http://localhost/ 로 끝나는 경우도 있다. 이 경우에 따라 프로젝트가 정상적으로 실행되지 않을 수 있으니 참고!!!!!! [출처] http://okky.kr/article/115423 [출처] http://jang8584.tistory.com/72","categories":[{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/categories/Spring-Framework/"}],"tags":[{"name":"스프링 프레임워크","slug":"스프링-프레임워크","permalink":"http://monibu1548.github.io/tags/스프링-프레임워크/"},{"name":"Spring Framework","slug":"Spring-Framework","permalink":"http://monibu1548.github.io/tags/Spring-Framework/"},{"name":"Web","slug":"Web","permalink":"http://monibu1548.github.io/tags/Web/"},{"name":"웹","slug":"웹","permalink":"http://monibu1548.github.io/tags/웹/"},{"name":"배포","slug":"배포","permalink":"http://monibu1548.github.io/tags/배포/"}]},{"title":"NHN 토스트루키 기술교육 2주차 회고","slug":"rooke2week","date":"2017-01-22T05:04:30.000Z","updated":"2018-04-15T05:27:43.484Z","comments":true,"path":"2017/01/22/rooke2week/","link":"","permalink":"http://monibu1548.github.io/2017/01/22/rooke2week/","excerpt":"Toast-Rookie 기술교육 2주차 투표 서비스 ‘신의 한 수’ 개발 시작 2주차부터 본격적으로 개발을 시작했다. git이나 태스크 관리 등 규칙 정하는데 하루를 모두 소비했다. 그 후 Repo 등록하고 Spring Framework프로젝트 생성 후 첫 Initial Commit을 날렸다. 2주차에는 DB -> DAO -> Service 까지 개발하기로 했다. 그래야 다음주에 UI를 할 수 있으니.. 2주차가 끝나는 오늘 아직 Service가 개발중이다. 중간에 DB를 갈아엎은게 영향이 컸다. 방명록 이후의 spring Jav","text":"Toast-Rookie 기술교육 2주차투표 서비스 ‘신의 한 수’ 개발 시작2주차부터 본격적으로 개발을 시작했다. git이나 태스크 관리 등 규칙 정하는데 하루를 모두 소비했다. 그 후 Repo 등록하고 Spring Framework프로젝트 생성 후 첫 Initial Commit을 날렸다.2주차에는 DB -&gt; DAO -&gt; Service 까지 개발하기로 했다. 그래야 다음주에 UI를 할 수 있으니..2주차가 끝나는 오늘 아직 Service가 개발중이다. 중간에 DB를 갈아엎은게 영향이 컸다. 방명록 이후의 springJava는 안드로이드로만 접했고 웹은 node로만 했었는데.. 생소한 Spring Framework로 자바웹을 하게 될 줄이야…그나마 사전과제 방명록 개발하면서 Spring에 익숙해진 덕분에 초기 개발환경 설정이나 구조를 이해하는데 도움이 많이 되었다. DB 삽질학부 데이터베이스 과목을 열심히 듣지 않았던 것을 매우 후회했다. 결국 DAO, DTO 다 구현해놓고 밤새 갈아엎어버리는 대참사가 발생했다. 프로젝트 개발 전 데이터베이스 검증을 진짜 잘 해야 나중에 고생을 안하겠구나..싶었다. TDD말로만 들었던 TDD을 적용해보기로 했다. Service 레벨에서 각 필요한 기능을 정의하고 해당 기능에서 발생할 수 있는 예외를 미리 예측하고 테스트케이스를 만들어 실제 서비스가 진행될 때 정의되지 않은 예외가 발생할 가능성을 줄일수 있을 것 같다.물론 TDD할 때도 테스트 케이스를 테스트하는 어처구니 없는 삽질을 하고야 말았다. 많이 연습하고 익숙해져야겠다. 토비의 스프링워낙 유명한 책이라 이름은 많이 들어봤지만, 자바웹에는 1도 관심이 없었기에 볼 생각은 한번도 안했다. Spring을 접하면서 읽게 되었는데 스프링 프레임워크에 대한 지식 뿐 아니라 일반적인 Java 개발에 도움이 되는 지식이 정말 많았다. 지금까지 java 개발을 하면서 의문을 가졌던 부분에 대해서 가장 정석적인, 효율적인 방법을 소개해주는게 제일 마음에 들었다. 붕 떠있던 지식들이 용어와 함께 정리되는 느낌! 또한 다른 오픈소스를 보면서 왜 저런구조인지 이해를 못했던 것도 토비의 스프링을 통해 알게 되었다. 예를 들면 Exception 처리를 발생 지점에서 바로 처리할지, 그냥 위로 throw 해버릴지에 대한 고민을 해결했다 ARCUS DB 오픈소스 공부할때 왜 각 Method 단위가 클래스로 되어있었는지.. 알고보니 전략패턴 아직도 남는 의문. 앞으로 해결해야 할 질문들 Spring은 MVC구조로 되어있다. View를 Spring 에서 만들어서 던져준다.. 요즘은 Front에서 ajax로 구현하는 SPA가 많지 않나..? 그런거에는 적합하지 않은 프레임워크인가? Spring 이랑 Catalina. 구조. 동작 순서","categories":[{"name":"NHN ent.","slug":"NHN-ent","permalink":"http://monibu1548.github.io/categories/NHN-ent/"}],"tags":[{"name":"NHN","slug":"NHN","permalink":"http://monibu1548.github.io/tags/NHN/"},{"name":"토스트루키","slug":"토스트루키","permalink":"http://monibu1548.github.io/tags/토스트루키/"},{"name":"기술교육","slug":"기술교육","permalink":"http://monibu1548.github.io/tags/기술교육/"}]},{"title":"Travis CI를 이용한 빌드 테스트","slug":"TravisCI","date":"2017-01-14T04:44:47.000Z","updated":"2018-04-15T05:27:38.838Z","comments":true,"path":"2017/01/14/TravisCI/","link":"","permalink":"http://monibu1548.github.io/2017/01/14/TravisCI/","excerpt":"Travis CI Travis CI 란? Travis CI는 오픈소스 커뮤니티를 위한 지속적 통합 서비스이다. Github의 README.md 파일을 보면 build/passing 같은 뱃지를 볼 수 있다. 이것이 travis의 CI의 결과를 쉽게 알 수 있는 기능이다. Travis CI 서비스 가입하기 * Travis CI 서비스 홈페이지 https://travis-ci.org/ * 서비스 가입은 Github 계정으로만 가입할 수 있다. Repository 연동하기 로그인 후 우측 상단의 계정을 클릭하여 [Accou","text":"Travis CITravis CI 란? Travis CI는 오픈소스 커뮤니티를 위한 지속적 통합 서비스이다. Github의 README.md 파일을 보면 build/passing 같은 뱃지를 볼 수 있다. 이것이 travis의 CI의 결과를 쉽게 알 수 있는 기능이다. Travis CI 서비스 가입하기 Travis CI 서비스 홈페이지 https://travis-ci.org/ 서비스 가입은 Github 계정으로만 가입할 수 있다. Repository 연동하기로그인 후 우측 상단의 계정을 클릭하여 [Account] 메뉴로 진입할 수 있다. 이 페이지에서 본인의 Repository가 체크박스 형태로 나열되어 있으며 CI를 On/Off 할 수 있다. Repository에 .travis.yml 파일이 있어야 한다 .travis.yml .travis.yml 설정 파일을 통해 테스트 환경을 설정할 수 있다. Repository의 가장 최상위 디렉토리에 작성한다. Maven 프로젝트라면 다음과 같은 간단한 .travis.yml로 CI를 연결할 수 있다. 1language: java mvn test 결과에 따라 build 성공 여부를 알려준다 Makefile 스크립트로 테스트 코드를 작성하고 .travis.yml 에서 script: 로 실행하여 다양한 테스트를 진행할 수 있다. Travis Badge 설치하기 대부분의 Github 오픈소스에서 README.md에 build/passing 이라는 초록 뱃지를 볼 수 있다. Travis CI 홈페이지에서 My Repository에 들어가면 레포 이름 옆에 뱃지를 볼 수 있다. 이 뱃지를 클릭하면 [Status Image] 라는 대화상자가 뜨며 이미지의 링크가 뜬다.!! 여기에서 branch 도 설정 가능하다..!! Travis CI를 통해 쉽게 빌드 테스트를 진행할 수 있으며 Branch뿐만 아니라 PR에 대해서도 검사를 진행하므로 더 생산적인 코딩을 할 수 있지 않을까!!!","categories":[{"name":"생산성","slug":"생산성","permalink":"http://monibu1548.github.io/categories/생산성/"}],"tags":[{"name":"CI","slug":"CI","permalink":"http://monibu1548.github.io/tags/CI/"},{"name":"java","slug":"java","permalink":"http://monibu1548.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://monibu1548.github.io/tags/maven/"},{"name":"jenkins","slug":"jenkins","permalink":"http://monibu1548.github.io/tags/jenkins/"}]}]}